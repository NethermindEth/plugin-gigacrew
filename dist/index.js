// src/client.ts
import { elizaLogger as elizaLogger4 } from "@elizaos/core";
import { ethers as ethers3 } from "ethers";

// src/environment.ts
function getGigaCrewConfig(runtime) {
  const gigacrewConfig = {
    GIGACREW_PROVIDER_URL: runtime.getSetting("GIGACREW_PROVIDER_URL") || process.env.GIGACREW_PROVIDER_URL,
    GIGACREW_CONTRACT_ADDRESS: runtime.getSetting("GIGACREW_CONTRACT_ADDRESS") || process.env.GIGACREW_CONTRACT_ADDRESS,
    GIGACREW_SELLER_PRIVATE_KEY: runtime.getSetting("GIGACREW_SELLER_PRIVATE_KEY") || process.env.GIGACREW_SELLER_PRIVATE_KEY,
    GIGACREW_SELLER_ADDRESS: runtime.getSetting("GIGACREW_SELLER_ADDRESS") || process.env.GIGACREW_SELLER_ADDRESS,
    GIGACREW_BUYER_PRIVATE_KEY: runtime.getSetting("GIGACREW_BUYER_PRIVATE_KEY") || process.env.GIGACREW_BUYER_PRIVATE_KEY,
    GIGACREW_BUYER_ADDRESS: runtime.getSetting("GIGACREW_BUYER_ADDRESS") || process.env.GIGACREW_BUYER_ADDRESS,
    GIGACREW_SERVICE_ID: runtime.getSetting("GIGACREW_SERVICE_ID") || process.env.GIGACREW_SERVICE_ID,
    GIGACREW_TIME_PER_SERVICE: parseInt(runtime.getSetting("GIGACREW_TIME_PER_SERVICE") || process.env.GIGACREW_TIME_PER_SERVICE || "0"),
    GIGACREW_TIME_BUFFER: parseInt(runtime.getSetting("GIGACREW_TIME_BUFFER") || process.env.GIGACREW_TIME_BUFFER || "0"),
    GIGACREW_FROM_BLOCK: parseInt(runtime.getSetting("GIGACREW_FROM_BLOCK") || process.env.GIGACREW_FROM_BLOCK || "0"),
    GIGACREW_INDEXER_URL: runtime.getSetting("GIGACREW_INDEXER_URL") || process.env.GIGACREW_INDEXER_URL,
    GIGACREW_FORCE_FROM_BLOCK: (runtime.getSetting("GIGACREW_FORCE_FROM_BLOCK") || process.env.GIGACREW_FORCE_FROM_BLOCK || "false") === "true"
  };
  return gigacrewConfig;
}

// src/abi/GigaCrew.json
var GigaCrew_default = { abi: [{ type: "constructor", inputs: [{ name: "_judges", type: "address[]", internalType: "address[]" }], stateMutability: "nonpayable" }, { type: "function", name: "createEscrow", inputs: [{ name: "_serviceId", type: "uint256", internalType: "uint256" }, { name: "_deadlinePeriod", type: "uint256", internalType: "uint256" }, { name: "_context", type: "string", internalType: "string" }], outputs: [{ name: "order_id", type: "uint256", internalType: "uint256" }], stateMutability: "payable" }, { type: "function", name: "disputeResolutionPeriod", inputs: [], outputs: [{ name: "", type: "uint256", internalType: "uint256" }], stateMutability: "view" }, { type: "function", name: "disputeResult", inputs: [{ name: "_orderId", type: "uint256", internalType: "uint256" }], outputs: [{ name: "buyerShare", type: "uint256", internalType: "uint256" }], stateMutability: "view" }, { type: "function", name: "disputes", inputs: [{ name: "", type: "uint256", internalType: "uint256" }], outputs: [{ name: "buyerShare", type: "uint256", internalType: "uint256" }, { name: "votes", type: "uint256", internalType: "uint256" }, { name: "timestamp", type: "uint256", internalType: "uint256" }], stateMutability: "view" }, { type: "function", name: "escrows", inputs: [{ name: "", type: "uint256", internalType: "uint256" }], outputs: [{ name: "buyer", type: "address", internalType: "address" }, { name: "seller", type: "address", internalType: "address" }, { name: "serviceId", type: "uint256", internalType: "uint256" }, { name: "amount", type: "uint256", internalType: "uint256" }, { name: "deadline", type: "uint256", internalType: "uint256" }, { name: "context", type: "string", internalType: "string" }, { name: "status", type: "uint8", internalType: "enum GigaCrew.EscrowStatus" }], stateMutability: "view" }, { type: "function", name: "judgeVotes", inputs: [{ name: "", type: "uint256", internalType: "uint256" }, { name: "", type: "uint256", internalType: "uint256" }], outputs: [{ name: "", type: "bool", internalType: "bool" }], stateMutability: "view" }, { type: "function", name: "judges", inputs: [{ name: "", type: "uint256", internalType: "uint256" }], outputs: [{ name: "", type: "address", internalType: "address" }], stateMutability: "view" }, { type: "function", name: "lastOrderId", inputs: [], outputs: [{ name: "", type: "uint256", internalType: "uint256" }], stateMutability: "view" }, { type: "function", name: "lastServiceId", inputs: [], outputs: [{ name: "", type: "uint256", internalType: "uint256" }], stateMutability: "view" }, { type: "function", name: "lockPeriod", inputs: [], outputs: [{ name: "", type: "uint256", internalType: "uint256" }], stateMutability: "view" }, { type: "function", name: "pauseService", inputs: [{ name: "_serviceId", type: "uint256", internalType: "uint256" }], outputs: [], stateMutability: "nonpayable" }, { type: "function", name: "pows", inputs: [{ name: "", type: "uint256", internalType: "uint256" }], outputs: [{ name: "work", type: "string", internalType: "string" }, { name: "timestamp", type: "uint256", internalType: "uint256" }], stateMutability: "view" }, { type: "function", name: "registerService", inputs: [{ name: "_title", type: "string", internalType: "string" }, { name: "_description", type: "string", internalType: "string" }, { name: "_communicationChannel", type: "string", internalType: "string" }, { name: "_rate", type: "uint256", internalType: "uint256" }], outputs: [{ name: "service_id", type: "uint256", internalType: "uint256" }], stateMutability: "nonpayable" }, { type: "function", name: "resumeService", inputs: [{ name: "_serviceId", type: "uint256", internalType: "uint256" }], outputs: [], stateMutability: "nonpayable" }, { type: "function", name: "services", inputs: [{ name: "", type: "uint256", internalType: "uint256" }], outputs: [{ name: "paused", type: "bool", internalType: "bool" }, { name: "provider", type: "address", internalType: "address" }, { name: "title", type: "string", internalType: "string" }, { name: "description", type: "string", internalType: "string" }, { name: "communicationChannel", type: "string", internalType: "string" }, { name: "rate", type: "uint256", internalType: "uint256" }], stateMutability: "view" }, { type: "function", name: "submitDispute", inputs: [{ name: "_orderId", type: "uint256", internalType: "uint256" }], outputs: [], stateMutability: "nonpayable" }, { type: "function", name: "submitPoW", inputs: [{ name: "_orderId", type: "uint256", internalType: "uint256" }, { name: "_work", type: "string", internalType: "string" }], outputs: [], stateMutability: "nonpayable" }, { type: "function", name: "voteOnDispute", inputs: [{ name: "_orderId", type: "uint256", internalType: "uint256" }, { name: "_judgeId", type: "uint256", internalType: "uint256" }, { name: "_buyerShare", type: "uint256", internalType: "uint256" }], outputs: [], stateMutability: "nonpayable" }, { type: "function", name: "withdrawFunds", inputs: [{ name: "_orderId", type: "uint256", internalType: "uint256" }, { name: "_signature", type: "bytes", internalType: "bytes" }], outputs: [], stateMutability: "nonpayable" }, { type: "event", name: "DisputeVote", inputs: [{ name: "orderId", type: "uint256", indexed: true, internalType: "uint256" }, { name: "judgeId", type: "uint256", indexed: true, internalType: "uint256" }, { name: "buyerShare", type: "uint256", indexed: false, internalType: "uint256" }], anonymous: false }, { type: "event", name: "EscrowCreated", inputs: [{ name: "orderId", type: "uint256", indexed: false, internalType: "uint256" }, { name: "serviceId", type: "uint256", indexed: true, internalType: "uint256" }, { name: "buyer", type: "address", indexed: true, internalType: "address" }, { name: "seller", type: "address", indexed: true, internalType: "address" }, { name: "context", type: "string", indexed: false, internalType: "string" }, { name: "deadline", type: "uint256", indexed: false, internalType: "uint256" }], anonymous: false }, { type: "event", name: "EscrowDisputed", inputs: [{ name: "orderId", type: "uint256", indexed: true, internalType: "uint256" }, { name: "disputeResolutionPeriod", type: "uint256", indexed: false, internalType: "uint256" }], anonymous: false }, { type: "event", name: "FundsWithdrawn", inputs: [{ name: "orderId", type: "uint256", indexed: true, internalType: "uint256" }, { name: "to", type: "address", indexed: true, internalType: "address" }, { name: "amount", type: "uint256", indexed: false, internalType: "uint256" }], anonymous: false }, { type: "event", name: "PoWSubmitted", inputs: [{ name: "orderId", type: "uint256", indexed: true, internalType: "uint256" }, { name: "buyer", type: "address", indexed: true, internalType: "address" }, { name: "seller", type: "address", indexed: true, internalType: "address" }, { name: "work", type: "string", indexed: false, internalType: "string" }, { name: "lockPeriod", type: "uint256", indexed: false, internalType: "uint256" }], anonymous: false }, { type: "event", name: "ServicePaused", inputs: [{ name: "serviceId", type: "uint256", indexed: true, internalType: "uint256" }], anonymous: false }, { type: "event", name: "ServiceRegistered", inputs: [{ name: "serviceId", type: "uint256", indexed: true, internalType: "uint256" }, { name: "provider", type: "address", indexed: true, internalType: "address" }], anonymous: false }, { type: "event", name: "ServiceResumed", inputs: [{ name: "serviceId", type: "uint256", indexed: true, internalType: "uint256" }], anonymous: false }, { type: "error", name: "AlreadyVoted", inputs: [] }, { type: "error", name: "DeadlineAlreadyPassed", inputs: [{ name: "deadline", type: "uint256", internalType: "uint256" }] }, { type: "error", name: "DeadlineNotPassed", inputs: [{ name: "deadline", type: "uint256", internalType: "uint256" }] }, { type: "error", name: "DisputeResolutionPeriodNotPassed", inputs: [{ name: "deadline", type: "uint256", internalType: "uint256" }] }, { type: "error", name: "DisputeResolutionPeriodPassed", inputs: [{ name: "deadline", type: "uint256", internalType: "uint256" }] }, { type: "error", name: "EmptyWork", inputs: [] }, { type: "error", name: "EscrowAlreadyWithdrawn", inputs: [] }, { type: "error", name: "EscrowNotPending", inputs: [{ name: "status", type: "uint8", internalType: "enum GigaCrew.EscrowStatus" }] }, { type: "error", name: "EscrowWithoutEnoughFunding", inputs: [] }, { type: "error", name: "InvalidBuyerShare", inputs: [] }, { type: "error", name: "InvalidOrderId", inputs: [] }, { type: "error", name: "InvalidServiceId", inputs: [] }, { type: "error", name: "LockPeriodNotPassed", inputs: [{ name: "lockDeadline", type: "uint256", internalType: "uint256" }] }, { type: "error", name: "MustBeBuyer", inputs: [] }, { type: "error", name: "MustBeJudge", inputs: [] }, { type: "error", name: "MustBeSeller", inputs: [] }, { type: "error", name: "NoDispute", inputs: [] }, { type: "error", name: "PoWAlreadySubmitted", inputs: [{ name: "submissionTimestamp", type: "uint256", internalType: "uint256" }] }, { type: "error", name: "PoWNotSubmitted", inputs: [] }], bytecode: { object: "", sourceMap: "65:13645:20:-:0;;;172:9;144:37;;228:9;187:50;;4083:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4131:16;;;;:6;;:16;;;;;:::i;:::-;;4083:71;65:13645;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;65:13645:20;-1:-1:-1;;;;;65:13645:20;;;;;;;;;;;-1:-1:-1;65:13645:20;;;;;;;-1:-1:-1;65:13645:20;;;-1:-1:-1;65:13645:20;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:21;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:177;225:13;;-1:-1:-1;;;;;267:31:21;;257:42;;247:70;;313:1;310;303:12;247:70;146:177;;;:::o;328:1129::-;423:6;454:2;497;485:9;476:7;472:23;468:32;465:52;;;513:1;510;503:12;465:52;540:16;;-1:-1:-1;;;;;605:14:21;;;602:34;;;632:1;629;622:12;602:34;670:6;659:9;655:22;645:32;;715:7;708:4;704:2;700:13;696:27;686:55;;737:1;734;727:12;686:55;766:2;760:9;788:2;784;781:10;778:36;;;794:18;;:::i;:::-;840:2;837:1;833:10;872:2;866:9;935:2;931:7;926:2;922;918:11;914:25;906:6;902:38;990:6;978:10;975:22;970:2;958:10;955:18;952:46;949:72;;;1001:18;;:::i;:::-;1037:2;1030:22;1087:18;;;1121:15;;;;-1:-1:-1;1163:11:21;;;1159:20;;;1191:19;;;1188:39;;;1223:1;1220;1213:12;1188:39;1247:11;;;;1267:159;1283:6;1278:3;1275:15;1267:159;;;1349:34;1379:3;1349:34;:::i;:::-;1337:47;;1300:12;;;;1404;;;;1267:159;;;1445:6;328:1129;-1:-1:-1;;;;;;;;328:1129:21:o;:::-;65:13645:20;;;;;;", linkReferences: {} }, deployedBytecode: { object: "0x6080604052600436106101145760003560e01c80638db9cb87116100a0578063c3480bfa11610064578063c3480bfa14610374578063d3967a6b14610394578063ecb7dbe9146103b4578063ed422358146103ca578063fdd1f754146103ea57600080fd5b80638db9cb87146102b4578063981e7c39146102ca578063b06b0368146102ea578063b8c4fd8314610322578063c22c4f431461034257600080fd5b806348c77367116100e757806348c77367146101e65780634f129fa314610214578063564a565d146102275780635662ecc71461027e5780636613ff341461029457600080fd5b8063012f52ee14610119578063065d82e6146101555780633fd8b02f14610177578063481b6a341461019b575b600080fd5b34801561012557600080fd5b50610139610134366004611809565b61040a565b60405161014c97969594939291906118a0565b60405180910390f35b34801561016157600080fd5b506101756101703660046119ab565b6104e1565b005b34801561018357600080fd5b5061018d60005481565b60405190815260200161014c565b3480156101a757600080fd5b506101d66101b63660046119f2565b600760209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161014c565b3480156101f257600080fd5b50610206610201366004611809565b610684565b60405161014c929190611a14565b61018d610222366004611a36565b610728565b34801561023357600080fd5b50610263610242366004611809565b60066020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161014c565b34801561028a57600080fd5b5061018d60095481565b3480156102a057600080fd5b506101756102af366004611809565b61092b565b3480156102c057600080fd5b5061018d60085481565b3480156102d657600080fd5b5061018d6102e5366004611a86565b6109a7565b3480156102f657600080fd5b5061030a610305366004611809565b610ab8565b6040516001600160a01b03909116815260200161014c565b34801561032e57600080fd5b5061017561033d366004611b16565b610ae2565b34801561034e57600080fd5b5061036261035d366004611809565b611179565b60405161014c96959493929190611b67565b34801561038057600080fd5b5061017561038f366004611bcd565b611354565b3480156103a057600080fd5b506101756103af366004611809565b611522565b3480156103c057600080fd5b5061018d60015481565b3480156103d657600080fd5b506101756103e5366004611809565b61168f565b3480156103f657600080fd5b5061018d610405366004611809565b61170e565b60046020819052600091825260409091208054600182015460028301546003840154948401546005850180546001600160a01b03958616979490951695929491929161045590611bf9565b80601f016020809104026020016040519081016040528092919081815260200182805461048190611bf9565b80156104ce5780601f106104a3576101008083540402835291602001916104ce565b820191906000526020600020905b8154815290600101906020018083116104b157829003601f168201915b5050506006909301549192505060ff1687565b816104eb816117b3565b6000818152600460205260409020600101546001600160a01b031633146105255760405163fa642e6360e01b815260040160405180910390fd5b60008381526005602052604090206001015415610571576000838152600560205260409081902060010154905163dbb03dd160e01b815260048101919091526024015b60405180910390fd5b600083815260046020819052604090912001544211156105bb5760008381526004602081905260409182902081015491516311a4f1f760e21b815261056892910190815260200190565b81516000036105dd57604051631ea15b4b60e21b815260040160405180910390fd5b6040805180820182528381524260208083019190915260008681526005909152919091208151819061060f9082611c7b565b50602091820151600190910155600084815260049091526040812054905433916001600160a01b03169085907f230e260af8b6459c4b7eeef52069161bb8e88cc06287121c5d8597f4005891df9086906106699042611d51565b604051610677929190611a14565b60405180910390a4505050565b60056020526000908152604090208054819061069f90611bf9565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb90611bf9565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b5050505050908060010154905082565b600060085484101580610749575060008481526003602052604090205460ff165b1561076757604051635622fbe760e11b815260040160405180910390fd5b60008481526003602052604090206004015434101561079957604051631cffc73b60e21b815260040160405180910390fd5b60008481526003602052604081205461010090046001600160a01b0316906107c18542611d51565b905060095492506040518060e00160405280336001600160a01b03168152602001836001600160a01b031681526020018781526020013481526020018281526020018581526020016000600481111561081c5761081c611868565b9052600084815260046020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601516001830180549094169116179091559183015160028301556060830151600383015560808301519082015560a082015160058201906108919082611c7b565b5060c082015160068201805460ff191660018360048111156108b5576108b5611868565b0217905550905050816001600160a01b0316336001600160a01b0316877f4916ef7907b23c52dc675748df584e7ba2a7b0ae61ac6e08ddc24bc0ff2751c886888660405161090593929190611d6a565b60405180910390a46009805490600061091d83611d93565b919050555050509392505050565b60008181526003602052604090205461010090046001600160a01b031633146109675760405163fa642e6360e01b815260040160405180910390fd5b600081815260036020526040808220805460ff191690555182917f9857dfdcdf9b2394a8313dc1009272759f78bed5734340044e63c373145b6b0a91a250565b6008546040805160c08101825260008082523360208084019182528385018a8152606085018a90526080850189905260a085018890528684526003909152939091208251815492516001600160a81b0319909316901515610100600160a81b031916176101006001600160a01b039093169290920291909117815591519091906001820190610a369082611c7b565b5060608201516002820190610a4b9082611c7b565b5060808201516003820190610a609082611c7b565b5060a09190910151600490910155604051339082907ffcd335a152e711f7e0e74487e27043f438dc7e73d600889758eb946a0192c3e090600090a360088054906000610aab83611d93565b9190505550949350505050565b60028181548110610ac857600080fd5b6000918252602090912001546001600160a01b0316905081565b81610aec816117b3565b600083815260046020819052604090912060068101546001820154825460039093015460ff909216936001600160a01b03918216939091169190846004811115610b3857610b38611868565b03610b56576040516372d3fbd360e01b815260040160405180910390fd5b6002846004811115610b6a57610b6a611868565b03610c2d5760006064610b7c8961170e565b610b869084611dac565b610b909190611dc3565b610b9a9083611de5565b6000898152600460208190526040808320600601805460ff1916909217909155519192506001600160a01b038616916108fc84150291849190818181858888f19350505050158015610bf0573d6000803e3d6000fd5b50836001600160a01b031688600080516020611e1d83398151915283604051610c1b91815260200190565b60405180910390a35050505050505050565b6003846004811115610c4157610c41611868565b03610ce85760006064610c538961170e565b610c5d9084611dac565b610c679190611dc3565b6000898152600460208190526040808320600601805460ff1916909217909155519192506001600160a01b038516916108fc84150291849190818181858888f19350505050158015610cbd573d6000803e3d6000fd5b50826001600160a01b031688600080516020611e1d83398151915283604051610c1b91815260200190565b855115610d295760405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b5c1b195b595b9d1959608a1b6044820152606401610568565b6001846004811115610d3d57610d3d611868565b03610fa9576000610d4d8861170e565b905080600003610dd4576000888152600460208190526040808320600601805460ff1916909217909155516001600160a01b038616916108fc851502918591818181858888f19350505050158015610da9573d6000803e3d6000fd5b50836001600160a01b031688600080516020611e1d83398151915284604051610c1b91815260200190565b80606403610e59576000888152600460208190526040808320600601805460ff1916909217909155516001600160a01b038516916108fc851502918591818181858888f19350505050158015610e2e573d6000803e3d6000fd5b50826001600160a01b031688600080516020611e1d83398151915284604051610c1b91815260200190565b6064610e658284611dac565b610e6f9190611dc3565b90506000610e7d8284611de5565b90506001600160a01b0384163303610f1c57600089815260046020526040808220600601805460ff19166002179055516001600160a01b038616916108fc851502918591818181858888f19350505050158015610ede573d6000803e3d6000fd5b50836001600160a01b031689600080516020611e1d83398151915284604051610f0991815260200190565b60405180910390a3505050505050505050565b6001600160a01b0385163303610fa657600089815260046020526040808220600601805460ff19166003179055516001600160a01b038716916108fc841502918491818181858888f19350505050158015610f7b573d6000803e3d6000fd5b50846001600160a01b031689600080516020611e1d83398151915283604051610f0991815260200190565b50505b600087815260056020526040902060010154156110ae57600080548882526005602052604090912060010154610fdf9190611d51565b4211611020576000805488825260056020526040909120600101546110049190611d51565b6040516303e7ea8d60e51b815260040161056891815260200190565b6000878152600460208190526040808320600601805460ff1916909217909155516001600160a01b038516916108fc841502918491818181858888f19350505050158015611072573d6000803e3d6000fd5b50826001600160a01b031687600080516020611e1d8339815191528360405161109d91815260200190565b60405180910390a350505050505050565b6000878152600460208190526040909120015442116110f757600087815260046020819052604091829020810154915163336d9e1760e01b815261056892910190815260200190565b6000878152600460208190526040808320600601805460ff1916909217909155516001600160a01b038416916108fc841502918491818181858888f19350505050158015611149573d6000803e3d6000fd5b50816001600160a01b031687600080516020611e1d8339815191528360405161109d91815260200190565b505050565b6003602052600090815260409020805460018201805460ff8316936101009093046001600160a01b03169291906111af90611bf9565b80601f01602080910402602001604051908101604052809291908181526020018280546111db90611bf9565b80156112285780601f106111fd57610100808354040283529160200191611228565b820191906000526020600020905b81548152906001019060200180831161120b57829003601f168201915b50505050509080600201805461123d90611bf9565b80601f016020809104026020016040519081016040528092919081815260200182805461126990611bf9565b80156112b65780601f1061128b576101008083540402835291602001916112b6565b820191906000526020600020905b81548152906001019060200180831161129957829003601f168201915b5050505050908060030180546112cb90611bf9565b80601f01602080910402602001604051908101604052809291908181526020018280546112f790611bf9565b80156113445780601f1061131957610100808354040283529160200191611344565b820191906000526020600020905b81548152906001019060200180831161132757829003601f168201915b5050505050908060040154905086565b828261135f826117d8565b6002818154811061137257611372611df8565b6000918252602090912001546001600160a01b031633146113a65760405163a1f19a5b60e01b815260040160405180910390fd5b600085815260076020908152604080832087845290915290205460ff16156113e157604051637c9a1cf960e01b815260040160405180910390fd5b600154600086815260066020526040902060020154429161140191611d51565b1015611442576001546000868152600660205260409020600201546114269190611d51565b604051630ed9be0960e01b815260040161056891815260200190565b606483111561146457604051636c92019160e11b815260040160405180910390fd5b60008581526007602090815260408083208784528252808320805460ff19166001908117909155888452600690925290912080820154905490916114a9908390611d51565b856114b48484611dac565b6114be9190611d51565b6114c89190611dc3565b600088815260066020526040812091825560019091018054916114ea83611d93565b919050555085877f312c806a35cfe3d38711aa246e6075bb138d63f58daf0a48ffd2c427099a745a8760405161109d91815260200190565b8061152c816117b3565b6000818152600460205260409020546001600160a01b0316331461156357604051633192ea7760e01b815260040160405180910390fd5b600082815260046020819052604082206006015460ff169081111561158a5761158a611868565b146115bf5760008281526004602081905260409182902060060154915163da72081760e01b81526105689260ff169101611e0e565b60008281526005602052604081206001015490036115f0576040516317c12a4960e31b815260040160405180910390fd5b60008281526004602090815260408083206006908101805460ff191660019081179091558251606081018452858152808501868152428286018181528a895294909652939095209451855591518483015551600290930192909255905483917fbe5ad221473781351cbe4130a4254f5f367e12adf1b369fdee909ad35bdfd3c69161167a91611d51565b60405190815260200160405180910390a25050565b60008181526003602052604090205461010090046001600160a01b031633146116cb5760405163fa642e6360e01b815260040160405180910390fd5b600081815260036020526040808220805460ff191660011790555182917fb62855a8e0d386952ecee37e0aa2de7c75b0de504a3a04b8345c22f0bbd31b1591a250565b60008161171a816117d8565b6001546000848152600660205260409020600201546117399190611d51565b421161177a5760015460008481526006602052604090206002015461175e9190611d51565b6040516332c6b2c360e01b815260040161056891815260200190565b600083815260066020526040812060010154900361179b57600091506117ad565b60008381526006602052604090205491505b50919050565b60095481106117d557604051635d70603360e01b815260040160405180910390fd5b50565b60008181526006602052604081206002015490036117d55760405163126ea8e960e31b815260040160405180910390fd5b60006020828403121561181b57600080fd5b5035919050565b6000815180845260005b818110156118485760208185018101518683018201520161182c565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b6005811061189c57634e487b7160e01b600052602160045260246000fd5b9052565b600060018060a01b03808a16835280891660208401525086604083015285606083015284608083015260e060a08301526118dd60e0830185611822565b90506118ec60c083018461187e565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611929576119296118f8565b604051601f8501601f19908116603f01168101908282118183101715611951576119516118f8565b8160405280935085815286868601111561196a57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261199557600080fd5b6119a48383356020850161190e565b9392505050565b600080604083850312156119be57600080fd5b82359150602083013567ffffffffffffffff8111156119dc57600080fd5b6119e885828601611984565b9150509250929050565b60008060408385031215611a0557600080fd5b50508035926020909101359150565b604081526000611a276040830185611822565b90508260208301529392505050565b600080600060608486031215611a4b57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115611a7057600080fd5b611a7c86828701611984565b9150509250925092565b60008060008060808587031215611a9c57600080fd5b843567ffffffffffffffff80821115611ab457600080fd5b611ac088838901611984565b95506020870135915080821115611ad657600080fd5b611ae288838901611984565b94506040870135915080821115611af857600080fd5b50611b0587828801611984565b949793965093946060013593505050565b60008060408385031215611b2957600080fd5b82359150602083013567ffffffffffffffff811115611b4757600080fd5b8301601f81018513611b5857600080fd5b6119e88582356020840161190e565b86151581526001600160a01b038616602082015260c060408201819052600090611b9390830187611822565b8281036060840152611ba58187611822565b90508281036080840152611bb98186611822565b9150508260a0830152979650505050505050565b600080600060608486031215611be257600080fd5b505081359360208301359350604090920135919050565b600181811c90821680611c0d57607f821691505b6020821081036117ad57634e487b7160e01b600052602260045260246000fd5b601f82111561117457600081815260208120601f850160051c81016020861015611c545750805b601f850160051c820191505b81811015611c7357828155600101611c60565b505050505050565b815167ffffffffffffffff811115611c9557611c956118f8565b611ca981611ca38454611bf9565b84611c2d565b602080601f831160018114611cde5760008415611cc65750858301515b600019600386901b1c1916600185901b178555611c73565b600085815260208120601f198616915b82811015611d0d57888601518255948401946001909101908401611cee565b5085821015611d2b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b80820180821115611d6457611d64611d3b565b92915050565b838152606060208201526000611d836060830185611822565b9050826040830152949350505050565b600060018201611da557611da5611d3b565b5060010190565b8082028115828204841417611d6457611d64611d3b565b600082611de057634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611d6457611d64611d3b565b634e487b7160e01b600052603260045260246000fd5b60208101611d64828461187e56fef440aec6b52895984d061d622e6edeba6210f7c3e059be920663140c084560d7a264697066735822122095f3ea57933800baa71df12f6116a4ecfaa561607fcb05fa14d55a995126a80664736f6c63430008130033", sourceMap: "65:13645:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1200:41;;;;;;;;;;-1:-1:-1;1200:41:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;6277:680;;;;;;;;;;-1:-1:-1;6277:680:20;;;;;:::i;:::-;;:::i;:::-;;144:37;;;;;;;;;;;;;;;;;;;3291:25:21;;;3279:2;3264:18;144:37:20;3145:177:21;1338:62:20;;;;;;;;;;-1:-1:-1;1338:62:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3745:14:21;;3738:22;3720:41;;3708:2;3693:18;1338:62:20;3580:187:21;1248:35:20;;;;;;;;;;-1:-1:-1;1248:35:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;5278:993::-;;;;;;:::i;:::-;;:::i;1289:43::-;;;;;;;;;;-1:-1:-1;1289:43:20;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4733:25:21;;;4789:2;4774:18;;4767:34;;;;4817:18;;;4810:34;4721:2;4706:18;1289:43:20;4531:319:21;1440:26:20;;;;;;;;;;;;;;;;5023:249;;;;;;;;;;-1:-1:-1;5023:249:20;;;;;:::i;:::-;;:::i;1406:28::-;;;;;;;;;;;;;;;;4177:588;;;;;;;;;;-1:-1:-1;4177:588:20;;;;;:::i;:::-;;:::i;275:23::-;;;;;;;;;;-1:-1:-1;275:23:20;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;5836:32:21;;;5818:51;;5806:2;5791:18;275:23:20;5672:203:21;9028:4680:20;;;;;;;;;;-1:-1:-1;9028:4680:20;;;;;:::i;:::-;;:::i;1151:43::-;;;;;;;;;;-1:-1:-1;1151:43:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;7581:866::-;;;;;;;;;;-1:-1:-1;7581:866:20;;;;;:::i;:::-;;:::i;6963:587::-;;;;;;;;;;-1:-1:-1;6963:587:20;;;;;:::i;:::-;;:::i;187:50::-;;;;;;;;;;;;;;;;4771:246;;;;;;;;;;-1:-1:-1;4771:246:20;;;;;:::i;:::-;;:::i;8453:569::-;;;;;;;;;;-1:-1:-1;8453:569:20;;;;;:::i;:::-;;:::i;1200:41::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1200:41:20;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1200:41:20;;;;;;;-1:-1:-1;;1200:41:20;;;:::o;6277:680::-;6377:8;3734:23;3748:8;3734:13;:23::i;:::-;3785:17;;;;:7;:17;;;;;:24;;;-1:-1:-1;;;;;3785:24:20;3771:10;:38;3767:90;;3832:14;;-1:-1:-1;;;3832:14:20;;;;;;;;;;;3767:90;6428:1:::1;6401:14:::0;;;:4:::1;:14;::::0;;;;:24:::1;;::::0;:28;6397:111:::1;;6472:14;::::0;;;:4:::1;:14;::::0;;;;;;:24:::1;;::::0;6452:45;;-1:-1:-1;;;6452:45:20;;::::1;::::0;::::1;3291:25:21::0;;;;3264:18;;6452:45:20::1;;;;;;;;6397:111;6522:17;::::0;;;:7:::1;:17;::::0;;;;;;;:26:::1;::::0;6551:15:::1;-1:-1:-1::0;6518:131:20::1;;;6611:17;::::0;;;:7:::1;:17;::::0;;;;;;;;:26;::::1;::::0;6589:49;;-1:-1:-1;;;6589:49:20;;::::1;::::0;6611:26;6589:49:::1;3291:25:21::0;;;3279:2;3264:18;;3145:177;6518:131:20::1;6669:5;6663:19;6686:1;6663:24:::0;6659:73:::1;;6710:11;;-1:-1:-1::0;;;6710:11:20::1;;;;;;;;;;;6659:73;6759:80;::::0;;;;::::1;::::0;;;;;6813:15:::1;6759:80;::::0;;::::1;::::0;;;;-1:-1:-1;6742:14:20;;;:4:::1;:14:::0;;;;;;;:97;;:14;;:97:::1;::::0;:14;:97:::1;:::i;:::-;-1:-1:-1::0;6742:97:20::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;6877:17:::1;::::0;;;:7:::1;:17:::0;;;;;;:23;6939:10;;6902::::1;::::0;-1:-1:-1;;;;;6877:23:20::1;::::0;6885:8;;6854:96:::1;::::0;6914:5;;6921:28:::1;::::0;:15:::1;:28;:::i;:::-;6854:96;;;;;;;:::i;:::-;;;;;;;;6277:680:::0;;;:::o;1248:35::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5278:993::-;5425:16;5471:13;;5457:10;:27;;:58;;;-1:-1:-1;5488:20:20;;;;:8;:20;;;;;:27;;;5457:58;5453:114;;;5538:18;;-1:-1:-1;;;5538:18:20;;;;;;;;;;;5453:114;5635:20;;;;:8;:20;;;;;:25;;;5623:9;:37;5619:103;;;5683:28;;-1:-1:-1;;;5683:28:20;;;;;;;;;;;5619:103;5732:14;5749:20;;;:8;:20;;;;;:29;;;;-1:-1:-1;;;;;5749:29:20;;5807:33;5825:15;5807;:33;:::i;:::-;5788:52;;5862:11;;5851:22;;5903:248;;;;;;;;5931:10;-1:-1:-1;;;;;5903:248:20;;;;;5963:6;-1:-1:-1;;;;;5903:248:20;;;;;5994:10;5903:248;;;;6026:9;5903:248;;;;6059:8;5903:248;;;;6090:8;5903:248;;;;6120:20;5903:248;;;;;;;;:::i;:::-;;;5883:17;;;;:7;:17;;;;;;;;;:268;;;;-1:-1:-1;;;;;;5883:268:20;;;-1:-1:-1;;;;;5883:268:20;;;;;;;;;;-1:-1:-1;5883:268:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5883:268:20;;;;;;;;;-1:-1:-1;;5883:268:20;;;;;;;;;;;:::i;:::-;;;;;;;;;6214:6;-1:-1:-1;;;;;6166:75:20;6202:10;-1:-1:-1;;;;;6166:75:20;6190:10;6166:75;6180:8;6222;6232;6166:75;;;;;;;;:::i;:::-;;;;;;;;6251:11;:13;;;:11;:13;;;:::i;:::-;;;;;;5443:828;;5278:993;;;;;:::o;5023:249::-;5089:20;;;;:8;:20;;;;;:29;;;;-1:-1:-1;;;;;5089:29:20;5122:10;5089:43;5085:95;;5155:14;;-1:-1:-1;;;5155:14:20;;;;;;;;;;;5085:95;5219:5;5189:20;;;:8;:20;;;;;;:35;;-1:-1:-1;;5189:35:20;;;5239:26;5198:10;;5239:26;;;5023:249;:::o;4177:588::-;4403:13;;4449:228;;;;;;;;-1:-1:-1;4449:228:20;;;4508:10;4449:228;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4426:20;;;:8;:20;;;;;;;:251;;;;;;-1:-1:-1;;;;;;4426:251:20;;;;;;-1:-1:-1;;;;;;4426:251:20;;;-1:-1:-1;;;;;4426:251:20;;;;;;;;;;;;;;;4449:228;;4426:20;-1:-1:-1;4426:251:20;;;;;;;:::i;:::-;-1:-1:-1;4426:251:20;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4426:251:20;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4426:251:20;;;;;;;;;;;4692:41;;4722:10;;4710;;4692:41;;;;;4743:13;:15;;;:13;:15;;;:::i;:::-;;;;;;4177:588;;;;;;:::o;275:23::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;275:23:20;;-1:-1:-1;275:23:20;:::o;9028:4680::-;9116:8;3349:23;3363:8;3349:13;:23::i;:::-;9640:25:::1;9668:17:::0;;;:7:::1;:17;::::0;;;;;;;:24:::1;::::0;::::1;::::0;;9719;::::1;::::0;9769:23;;9819:24:::1;::::0;;::::1;::::0;9668::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;9719:24:20;;::::1;::::0;9769:23;;::::1;::::0;9819:24;9858:12:::1;:38;;;;;;;;:::i;:::-;::::0;9854:100:::1;;9919:24;;-1:-1:-1::0;;;9919:24:20::1;;;;;;;;;;;9854:100;9984:27;9968:12;:43;;;;;;;;:::i;:::-;::::0;9964:343:::1;;10027:19;10094:3;10068:23;10082:8;10068:13;:23::i;:::-;10059:32;::::0;:6;:32:::1;:::i;:::-;:38;;;;:::i;:::-;10049:49;::::0;:6;:49:::1;:::i;:::-;10112:17;::::0;;;10139:22:::1;10112:17;::::0;;;;;;;:24:::1;;:49:::0;;-1:-1:-1;;10112:49:20::1;::::0;;::::1;::::0;;;10175:37;10027:71;;-1:-1:-1;;;;;;10175:24:20;::::1;::::0;:37:::1;::::0;::::1;;::::0;10027:71;;10175:37;;10112:17;10175:37;10027:71;10175:24;:37;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;10256:6;-1:-1:-1::0;;;;;10231:45:20::1;10246:8;-1:-1:-1::0;;;;;;;;;;;10264:11:20::1;10231:45;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;10231:45:20::1;;;;;;;;10290:7;;;;;9028:4680:::0;;;:::o;9964:343::-:1;10337:28;10321:12;:44;;;;;;;;:::i;:::-;::::0;10317:328:::1;;10381:18;10437:3;10411:23;10425:8;10411:13;:23::i;:::-;10402:32;::::0;:6;:32:::1;:::i;:::-;:38;;;;:::i;:::-;10454:17;::::0;;;10481:22:::1;10454:17;::::0;;;;;;;:24:::1;;:49:::0;;-1:-1:-1;;10454:49:20::1;::::0;;::::1;::::0;;;10517:35;10381:59;;-1:-1:-1;;;;;;10517:23:20;::::1;::::0;:35:::1;::::0;::::1;;::::0;10381:59;;10517:35;;10454:17;10517:35;10381:59;10517:23;:35;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;10596:5;-1:-1:-1::0;;;;;10571:43:20::1;10586:8;-1:-1:-1::0;;;;;;;;;;;10603:10:20::1;10571:43;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;10317:328:20::1;10719:17:::0;;:21;10715:214:::1;;10893:25;::::0;-1:-1:-1;;;10893:25:20;;11616:2:21;10893:25:20::1;::::0;::::1;11598:21:21::0;11655:2;11635:18;;;11628:30;-1:-1:-1;;;11674:18:21;;;11667:45;11729:18;;10893:25:20::1;11414:339:21::0;10715:214:20::1;11031:21;11015:12;:37;;;;;;;;:::i;:::-;::::0;11011:1714:::1;;11068:18;11089:23;11103:8;11089:13;:23::i;:::-;11068:44;;11231:10;11245:1;11231:15:::0;11227:569:::1;;11308:17;::::0;;;11335:22:::1;11308:17;::::0;;;;;;;:24:::1;;:49:::0;;-1:-1:-1;;11308:49:20::1;::::0;;::::1;::::0;;;11375:32;-1:-1:-1;;;;;11375:24:20;::::1;::::0;:32:::1;::::0;::::1;;::::0;;;;11308:17;11375:32;;:24;:32;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;11455:6;-1:-1:-1::0;;;;;11430:40:20::1;11445:8;-1:-1:-1::0;;;;;;;;;;;11463:6:20::1;11430:40;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;11227:569:20::1;11519:10;11533:3;11519:17:::0;11515:281:::1;;11597:17;::::0;;;11624:22:::1;11597:17;::::0;;;;;;;:24:::1;;:49:::0;;-1:-1:-1;;11597:49:20::1;::::0;;::::1;::::0;;;11664:31;-1:-1:-1;;;;;11664:23:20;::::1;::::0;:31:::1;::::0;::::1;;::::0;;;;11597:17;11664:31;;:23;:31;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;11743:5;-1:-1:-1::0;;;;;11718:39:20::1;11733:8;-1:-1:-1::0;;;;;;;;;;;11750:6:20::1;11718:39;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;11515:281:20::1;11896:3;11874:19;11883:10:::0;11874:6;:19:::1;:::i;:::-;:25;;;;:::i;:::-;11861:38:::0;-1:-1:-1;11913:19:20::1;11935;11861:38:::0;11935:6;:19:::1;:::i;:::-;11913:41:::0;-1:-1:-1;;;;;;12197:19:20;::::1;:10;:19:::0;12193:522:::1;;12236:17;::::0;;;:7:::1;:17;::::0;;;;;:24:::1;;:54:::0;;-1:-1:-1;;12236:54:20::1;12263:27;12236:54;::::0;;12308:35;-1:-1:-1;;;;;12308:23:20;::::1;::::0;:35:::1;::::0;::::1;;::::0;;;;12236:17;12308:35;;:23;:35;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;12391:5;-1:-1:-1::0;;;;;12366:43:20::1;12381:8;-1:-1:-1::0;;;;;;;;;;;12398:10:20::1;12366:43;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;12366:43:20::1;;;;;;;;12427:7;;;;;;9028:4680:::0;;;:::o;12193:522::-:1;-1:-1:-1::0;;;;;12458:20:20;::::1;:10;:20:::0;12454:261:::1;;12498:17;::::0;;;:7:::1;:17;::::0;;;;;:24:::1;;:55:::0;;-1:-1:-1;;12498:55:20::1;12525:28;12498:55;::::0;;12571:37;-1:-1:-1;;;;;12571:24:20;::::1;::::0;:37:::1;::::0;::::1;;::::0;;;;12498:17;12571:37;;:24;:37;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;12656:6;-1:-1:-1::0;;;;;12631:45:20::1;12646:8;-1:-1:-1::0;;;;;;;;;;;12664:11:20::1;12631:45;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;12454:261:20::1;11054:1671;;11011:1714;12846:1;12819:14:::0;;;:4:::1;:14;::::0;;;;:24:::1;;::::0;:28;12815:887:::1;;12977:10;::::0;;12950:14;;;:4:::1;:14;::::0;;;;;:24:::1;;::::0;:37:::1;::::0;12977:10;12950:37:::1;:::i;:::-;12931:15;:56;12927:160;;13061:10;::::0;;13034:14;;;:4:::1;:14;::::0;;;;;:24:::1;;::::0;:37:::1;::::0;13061:10;13034:37:::1;:::i;:::-;13014:58;;-1:-1:-1::0;;;13014:58:20::1;;;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;12927:160:20::1;13101:17;::::0;;;13128:22:::1;13101:17;::::0;;;;;;;:24:::1;;:49:::0;;-1:-1:-1;;13101:49:20::1;::::0;;::::1;::::0;;;13164:32;-1:-1:-1;;;;;13164:24:20;::::1;::::0;:32:::1;::::0;::::1;;::::0;;;;13101:17;13164:32;;:24;:32;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;13240:6;-1:-1:-1::0;;;;;13215:40:20::1;13230:8;-1:-1:-1::0;;;;;;;;;;;13248:6:20::1;13215:40;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;13215:40:20::1;;;;;;;;13269:7;;;;9028:4680:::0;;;:::o;12815:887::-:1;13392:17;::::0;;;:7:::1;:17;::::0;;;;;;;:26:::1;::::0;13373:15:::1;:45;13369:136;;13463:17;::::0;;;:7:::1;:17;::::0;;;;;;;;:26;::::1;::::0;13445:45;;-1:-1:-1;;;13445:45:20;;::::1;::::0;13463:26;13445:45:::1;3291:25:21::0;;;3279:2;3264:18;;3145:177;13369:136:20::1;13519:17;::::0;;;13546:22:::1;13519:17;::::0;;;;;;;:24:::1;;:49:::0;;-1:-1:-1;;13519:49:20::1;::::0;;::::1;::::0;;;13582:31;-1:-1:-1;;;;;13582:23:20;::::1;::::0;:31:::1;::::0;::::1;;::::0;;;;13519:17;13582:31;;:23;:31;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;13657:5;-1:-1:-1::0;;;;;13632:39:20::1;13647:8;-1:-1:-1::0;;;;;;;;;;;13664:6:20::1;13632:39;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;3382:1:20::1;9028:4680:::0;;;:::o;1151:43::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1151:43:20;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7581:866::-;7680:8;7690;3945:24;3960:8;3945:14;:24::i;:::-;3997:6;4004:8;3997:16;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;3997:16:20;3983:10;:30;3979:81;;4036:13;;-1:-1:-1;;;4036:13:20;;;;;;;;;;;3979:81;7714:20:::1;::::0;;;:10:::1;:20;::::0;;;;;;;:30;;;;;;;;;::::1;;7710:82;;;7767:14;;-1:-1:-1::0;;;7767:14:20::1;;;;;;;;;;;7710:82;7837:23;::::0;7806:18:::1;::::0;;;:8:::1;:18;::::0;;;;:28:::1;;::::0;7863:15:::1;::::0;7806:54:::1;::::0;::::1;:::i;:::-;:72;7802:195;;;7962:23;::::0;7931:18:::1;::::0;;;:8:::1;:18;::::0;;;;:28:::1;;::::0;:54:::1;::::0;7962:23;7931:54:::1;:::i;:::-;7901:85;;-1:-1:-1::0;;;7901:85:20::1;;;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;7802:195:20::1;8025:3;8011:11;:17;8007:74;;;8051:19;;-1:-1:-1::0;;;8051:19:20::1;;;;;;;;;;;8007:74;8091:20;::::0;;;:10:::1;:20;::::0;;;;;;;:30;;;;;;;;:37;;-1:-1:-1;;8091:37:20::1;8124:4;8091:37:::0;;::::1;::::0;;;8158:18;;;:8:::1;:18:::0;;;;;;:24;;::::1;::::0;8216:29;;8158:24;;8332:12:::1;::::0;8158:24;;8332:12:::1;:::i;:::-;8316:11:::0;8289:24:::1;8305:8:::0;8289:13;:24:::1;:::i;:::-;:38;;;;:::i;:::-;8288:57;;;;:::i;:::-;8256:18;::::0;;;:8:::1;:18;::::0;;;;:89;;;8355:24:::1;::::0;;::::1;:26:::0;;;::::1;::::0;::::1;:::i;:::-;;;;;;8418:8;8408;8396:44;8428:11;8396:44;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;6963:587:20;7023:8;3542:23;3556:8;3542:13;:23::i;:::-;3593:17;;;;:7;:17;;;;;:23;-1:-1:-1;;;;;3593:23:20;3579:10;:37;3575:88;;3639:13;;-1:-1:-1;;;3639:13:20;;;;;;;;;;;3575:88;7075:20:::1;7047:17:::0;;;:7:::1;:17;::::0;;;;;;:24:::1;;::::0;::::1;;::::0;:48;::::1;;;;;;:::i;:::-;;7043:128;;7135:17;::::0;;;:7:::1;:17;::::0;;;;;;;;:24:::1;;::::0;7118:42;;-1:-1:-1;;;7118:42:20;;::::1;::::0;7135:24:::1;;::::0;7118:42:::1;;:::i;7043:128::-;7184:14;::::0;;;:4:::1;:14;::::0;;;;:24:::1;;::::0;:29;;7180:84:::1;;7236:17;;-1:-1:-1::0;;;7236:17:20::1;;;;;;;;;;;7180:84;7274:17;::::0;;;:7:::1;:17;::::0;;;;;;;:24:::1;::::0;;::::1;:48:::0;;-1:-1:-1;;7274:48:20::1;7301:21;7274:48:::0;;::::1;::::0;;;7353:108;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;;;7435:15:::1;7353:108:::0;;;;;;7332:18;;;;;;;;;;;:129;;;;;;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;7519:23;;7274:17;;7476:67:::1;::::0;7501:41:::1;::::0;::::1;:::i;:::-;7476:67;::::0;3291:25:21;;;3279:2;3264:18;7476:67:20::1;;;;;;;6963:587:::0;;:::o;4771:246::-;4836:20;;;;:8;:20;;;;;:29;;;;-1:-1:-1;;;;;4836:29:20;4869:10;4836:43;4832:95;;4902:14;;-1:-1:-1;;;4902:14:20;;;;;;;;;;;4832:95;4936:20;;;;:8;:20;;;;;;:34;;-1:-1:-1;;4936:34:20;4966:4;4936:34;;;4985:25;4945:10;;4985:25;;;4771:246;:::o;8453:569::-;8539:18;8515:8;3447:24;3462:8;3447:14;:24::i;:::-;8623:23:::1;::::0;8592:18:::1;::::0;;;:8:::1;:18;::::0;;;;:28:::1;;::::0;:54:::1;::::0;8623:23;8592:54:::1;:::i;:::-;8573:15;:73;8569:199;;8733:23;::::0;8702:18:::1;::::0;;;:8:::1;:18;::::0;;;;:28:::1;;::::0;:54:::1;::::0;8733:23;8702:54:::1;:::i;:::-;8669:88;;-1:-1:-1::0;;;8669:88:20::1;;;;;;3291:25:21::0;;3279:2;3264:18;;3145:177;8569:199:20::1;8829:18;::::0;;;:8:::1;:18;::::0;;;;:24:::1;;::::0;:29;;8825:68:::1;;8881:1;8874:8;;;;8825:68;8986:18;::::0;;;:8:::1;:18;::::0;;;;:29;;-1:-1:-1;3481:1:20::1;8453:569:::0;;;;:::o;2985:148::-;3066:11;;3054:8;:23;3050:77;;3100:16;;-1:-1:-1;;;3100:16:20;;;;;;;;;;;3050:77;2985:148;:::o;3139:154::-;3209:18;;;;:8;:18;;;;;:28;;;:33;;3205:82;;3265:11;;-1:-1:-1;;;3265:11:20;;;;;;;;;;;14:180:21;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:21;;14:180;-1:-1:-1;14:180:21:o;199:423::-;241:3;279:5;273:12;306:6;301:3;294:19;331:1;341:162;355:6;352:1;349:13;341:162;;;417:4;473:13;;;469:22;;463:29;445:11;;;441:20;;434:59;370:12;341:162;;;345:3;548:1;541:4;532:6;527:3;523:16;519:27;512:38;611:4;604:2;600:7;595:2;587:6;583:15;579:29;574:3;570:39;566:50;559:57;;;199:423;;;;:::o;627:127::-;688:10;683:3;679:20;676:1;669:31;719:4;716:1;709:15;743:4;740:1;733:15;759:240;843:1;836:5;833:12;823:143;;888:10;883:3;879:20;876:1;869:31;923:4;920:1;913:15;951:4;948:1;941:15;823:143;975:18;;759:240::o;1004:745::-;1300:4;1346:1;1342;1337:3;1333:11;1329:19;1387:2;1379:6;1375:15;1364:9;1357:34;1439:2;1431:6;1427:15;1422:2;1411:9;1407:18;1400:43;;1479:6;1474:2;1463:9;1459:18;1452:34;1522:6;1517:2;1506:9;1502:18;1495:34;1566:6;1560:3;1549:9;1545:19;1538:35;1610:3;1604;1593:9;1589:19;1582:32;1631:46;1672:3;1661:9;1657:19;1649:6;1631:46;:::i;:::-;1623:54;;1686:57;1738:3;1727:9;1723:19;1715:6;1686:57;:::i;:::-;1004:745;;;;;;;;;;:::o;1754:127::-;1815:10;1810:3;1806:20;1803:1;1796:31;1846:4;1843:1;1836:15;1870:4;1867:1;1860:15;1886:632;1951:5;1981:18;2022:2;2014:6;2011:14;2008:40;;;2028:18;;:::i;:::-;2103:2;2097:9;2071:2;2157:15;;-1:-1:-1;;2153:24:21;;;2179:2;2149:33;2145:42;2133:55;;;2203:18;;;2223:22;;;2200:46;2197:72;;;2249:18;;:::i;:::-;2289:10;2285:2;2278:22;2318:6;2309:15;;2348:6;2340;2333:22;2388:3;2379:6;2374:3;2370:16;2367:25;2364:45;;;2405:1;2402;2395:12;2364:45;2455:6;2450:3;2443:4;2435:6;2431:17;2418:44;2510:1;2503:4;2494:6;2486;2482:19;2478:30;2471:41;;;;1886:632;;;;;:::o;2523:222::-;2566:5;2619:3;2612:4;2604:6;2600:17;2596:27;2586:55;;2637:1;2634;2627:12;2586:55;2659:80;2735:3;2726:6;2713:20;2706:4;2698:6;2694:17;2659:80;:::i;:::-;2650:89;2523:222;-1:-1:-1;;;2523:222:21:o;2750:390::-;2828:6;2836;2889:2;2877:9;2868:7;2864:23;2860:32;2857:52;;;2905:1;2902;2895:12;2857:52;2941:9;2928:23;2918:33;;3002:2;2991:9;2987:18;2974:32;3029:18;3021:6;3018:30;3015:50;;;3061:1;3058;3051:12;3015:50;3084;3126:7;3117:6;3106:9;3102:22;3084:50;:::i;:::-;3074:60;;;2750:390;;;;;:::o;3327:248::-;3395:6;3403;3456:2;3444:9;3435:7;3431:23;3427:32;3424:52;;;3472:1;3469;3462:12;3424:52;-1:-1:-1;;3495:23:21;;;3565:2;3550:18;;;3537:32;;-1:-1:-1;3327:248:21:o;3772:291::-;3949:2;3938:9;3931:21;3912:4;3969:45;4010:2;3999:9;3995:18;3987:6;3969:45;:::i;:::-;3961:53;;4050:6;4045:2;4034:9;4030:18;4023:34;3772:291;;;;;:::o;4068:458::-;4155:6;4163;4171;4224:2;4212:9;4203:7;4199:23;4195:32;4192:52;;;4240:1;4237;4230:12;4192:52;4276:9;4263:23;4253:33;;4333:2;4322:9;4318:18;4305:32;4295:42;;4388:2;4377:9;4373:18;4360:32;4415:18;4407:6;4404:30;4401:50;;;4447:1;4444;4437:12;4401:50;4470;4512:7;4503:6;4492:9;4488:22;4470:50;:::i;:::-;4460:60;;;4068:458;;;;;:::o;4855:812::-;4971:6;4979;4987;4995;5048:3;5036:9;5027:7;5023:23;5019:33;5016:53;;;5065:1;5062;5055:12;5016:53;5105:9;5092:23;5134:18;5175:2;5167:6;5164:14;5161:34;;;5191:1;5188;5181:12;5161:34;5214:50;5256:7;5247:6;5236:9;5232:22;5214:50;:::i;:::-;5204:60;;5317:2;5306:9;5302:18;5289:32;5273:48;;5346:2;5336:8;5333:16;5330:36;;;5362:1;5359;5352:12;5330:36;5385:52;5429:7;5418:8;5407:9;5403:24;5385:52;:::i;:::-;5375:62;;5490:2;5479:9;5475:18;5462:32;5446:48;;5519:2;5509:8;5506:16;5503:36;;;5535:1;5532;5525:12;5503:36;;5558:52;5602:7;5591:8;5580:9;5576:24;5558:52;:::i;:::-;4855:812;;;;-1:-1:-1;5548:62:21;;5657:2;5642:18;5629:32;;-1:-1:-1;;;4855:812:21:o;5880:518::-;5957:6;5965;6018:2;6006:9;5997:7;5993:23;5989:32;5986:52;;;6034:1;6031;6024:12;5986:52;6070:9;6057:23;6047:33;;6131:2;6120:9;6116:18;6103:32;6158:18;6150:6;6147:30;6144:50;;;6190:1;6187;6180:12;6144:50;6213:22;;6266:4;6258:13;;6254:27;-1:-1:-1;6244:55:21;;6295:1;6292;6285:12;6244:55;6318:74;6384:7;6379:2;6366:16;6361:2;6357;6353:11;6318:74;:::i;6403:799::-;6733:14;;6726:22;6708:41;;-1:-1:-1;;;;;6785:32:21;;6780:2;6765:18;;6758:60;6854:3;6849:2;6834:18;;6827:31;;;-1:-1:-1;;6881:46:21;;6907:19;;6899:6;6881:46;:::i;:::-;6975:9;6967:6;6963:22;6958:2;6947:9;6943:18;6936:50;7009:33;7035:6;7027;7009:33;:::i;:::-;6995:47;;7091:9;7083:6;7079:22;7073:3;7062:9;7058:19;7051:51;7119:33;7145:6;7137;7119:33;:::i;:::-;7111:41;;;7189:6;7183:3;7172:9;7168:19;7161:35;6403:799;;;;;;;;;:::o;7207:316::-;7284:6;7292;7300;7353:2;7341:9;7332:7;7328:23;7324:32;7321:52;;;7369:1;7366;7359:12;7321:52;-1:-1:-1;;7392:23:21;;;7462:2;7447:18;;7434:32;;-1:-1:-1;7513:2:21;7498:18;;;7485:32;;7207:316;-1:-1:-1;7207:316:21:o;7528:380::-;7607:1;7603:12;;;;7650;;;7671:61;;7725:4;7717:6;7713:17;7703:27;;7671:61;7778:2;7770:6;7767:14;7747:18;7744:38;7741:161;;7824:10;7819:3;7815:20;7812:1;7805:31;7859:4;7856:1;7849:15;7887:4;7884:1;7877:15;8039:545;8141:2;8136:3;8133:11;8130:448;;;8177:1;8202:5;8198:2;8191:17;8247:4;8243:2;8233:19;8317:2;8305:10;8301:19;8298:1;8294:27;8288:4;8284:38;8353:4;8341:10;8338:20;8335:47;;;-1:-1:-1;8376:4:21;8335:47;8431:2;8426:3;8422:12;8419:1;8415:20;8409:4;8405:31;8395:41;;8486:82;8504:2;8497:5;8494:13;8486:82;;;8549:17;;;8530:1;8519:13;8486:82;;;8490:3;;;8039:545;;;:::o;8760:1352::-;8886:3;8880:10;8913:18;8905:6;8902:30;8899:56;;;8935:18;;:::i;:::-;8964:97;9054:6;9014:38;9046:4;9040:11;9014:38;:::i;:::-;9008:4;8964:97;:::i;:::-;9116:4;;9180:2;9169:14;;9197:1;9192:663;;;;9899:1;9916:6;9913:89;;;-1:-1:-1;9968:19:21;;;9962:26;9913:89;-1:-1:-1;;8717:1:21;8713:11;;;8709:24;8705:29;8695:40;8741:1;8737:11;;;8692:57;10015:81;;9162:944;;9192:663;7986:1;7979:14;;;8023:4;8010:18;;-1:-1:-1;;9228:20:21;;;9346:236;9360:7;9357:1;9354:14;9346:236;;;9449:19;;;9443:26;9428:42;;9541:27;;;;9509:1;9497:14;;;;9376:19;;9346:236;;;9350:3;9610:6;9601:7;9598:19;9595:201;;;9671:19;;;9665:26;-1:-1:-1;;9754:1:21;9750:14;;;9766:3;9746:24;9742:37;9738:42;9723:58;9708:74;;9595:201;-1:-1:-1;;;;;9842:1:21;9826:14;;;9822:22;9809:36;;-1:-1:-1;8760:1352:21:o;10117:127::-;10178:10;10173:3;10169:20;10166:1;10159:31;10209:4;10206:1;10199:15;10233:4;10230:1;10223:15;10249:125;10314:9;;;10335:10;;;10332:36;;;10348:18;;:::i;:::-;10249:125;;;;:::o;10379:362::-;10584:6;10573:9;10566:25;10627:2;10622;10611:9;10607:18;10600:30;10547:4;10647:45;10688:2;10677:9;10673:18;10665:6;10647:45;:::i;:::-;10639:53;;10728:6;10723:2;10712:9;10708:18;10701:34;10379:362;;;;;;:::o;10746:135::-;10785:3;10806:17;;;10803:43;;10826:18;;:::i;:::-;-1:-1:-1;10873:1:21;10862:13;;10746:135::o;10886:168::-;10959:9;;;10990;;11007:15;;;11001:22;;10987:37;10977:71;;11028:18;;:::i;11059:217::-;11099:1;11125;11115:132;;11169:10;11164:3;11160:20;11157:1;11150:31;11204:4;11201:1;11194:15;11232:4;11229:1;11222:15;11115:132;-1:-1:-1;11261:9:21;;11059:217::o;11281:128::-;11348:9;;;11369:11;;;11366:37;;;11383:18;;:::i;11758:127::-;11819:10;11814:3;11810:20;11807:1;11800:31;11850:4;11847:1;11840:15;11874:4;11871:1;11864:15;11890:215;12040:2;12025:18;;12052:47;12029:9;12081:6;12052:47;:::i", linkReferences: {} }, methodIdentifiers: { "createEscrow(uint256,uint256,string)": "4f129fa3", "disputeResolutionPeriod()": "ecb7dbe9", "disputeResult(uint256)": "fdd1f754", "disputes(uint256)": "564a565d", "escrows(uint256)": "012f52ee", "judgeVotes(uint256,uint256)": "481b6a34", "judges(uint256)": "b06b0368", "lastOrderId()": "5662ecc7", "lastServiceId()": "8db9cb87", "lockPeriod()": "3fd8b02f", "pauseService(uint256)": "ed422358", "pows(uint256)": "48c77367", "registerService(string,string,string,uint256)": "981e7c39", "resumeService(uint256)": "6613ff34", "services(uint256)": "c22c4f43", "submitDispute(uint256)": "d3967a6b", "submitPoW(uint256,string)": "065d82e6", "voteOnDispute(uint256,uint256,uint256)": "c3480bfa", "withdrawFunds(uint256,bytes)": "b8c4fd83" }, rawMetadata: '{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address[]","name":"_judges","type":"address[]"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AlreadyVoted","type":"error"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"DeadlineAlreadyPassed","type":"error"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"DeadlineNotPassed","type":"error"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"DisputeResolutionPeriodNotPassed","type":"error"},{"inputs":[{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"DisputeResolutionPeriodPassed","type":"error"},{"inputs":[],"name":"EmptyWork","type":"error"},{"inputs":[],"name":"EscrowAlreadyWithdrawn","type":"error"},{"inputs":[{"internalType":"enum GigaCrew.EscrowStatus","name":"status","type":"uint8"}],"name":"EscrowNotPending","type":"error"},{"inputs":[],"name":"EscrowWithoutEnoughFunding","type":"error"},{"inputs":[],"name":"InvalidBuyerShare","type":"error"},{"inputs":[],"name":"InvalidOrderId","type":"error"},{"inputs":[],"name":"InvalidServiceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"lockDeadline","type":"uint256"}],"name":"LockPeriodNotPassed","type":"error"},{"inputs":[],"name":"MustBeBuyer","type":"error"},{"inputs":[],"name":"MustBeJudge","type":"error"},{"inputs":[],"name":"MustBeSeller","type":"error"},{"inputs":[],"name":"NoDispute","type":"error"},{"inputs":[{"internalType":"uint256","name":"submissionTimestamp","type":"uint256"}],"name":"PoWAlreadySubmitted","type":"error"},{"inputs":[],"name":"PoWNotSubmitted","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"judgeId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"buyerShare","type":"uint256"}],"name":"DisputeVote","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"serviceId","type":"uint256"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"},{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":false,"internalType":"string","name":"context","type":"string"},{"indexed":false,"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"EscrowCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"disputeResolutionPeriod","type":"uint256"}],"name":"EscrowDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FundsWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"},{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":false,"internalType":"string","name":"work","type":"string"},{"indexed":false,"internalType":"uint256","name":"lockPeriod","type":"uint256"}],"name":"PoWSubmitted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"serviceId","type":"uint256"}],"name":"ServicePaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"serviceId","type":"uint256"},{"indexed":true,"internalType":"address","name":"provider","type":"address"}],"name":"ServiceRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"serviceId","type":"uint256"}],"name":"ServiceResumed","type":"event"},{"inputs":[{"internalType":"uint256","name":"_serviceId","type":"uint256"},{"internalType":"uint256","name":"_deadlinePeriod","type":"uint256"},{"internalType":"string","name":"_context","type":"string"}],"name":"createEscrow","outputs":[{"internalType":"uint256","name":"order_id","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"disputeResolutionPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_orderId","type":"uint256"}],"name":"disputeResult","outputs":[{"internalType":"uint256","name":"buyerShare","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"disputes","outputs":[{"internalType":"uint256","name":"buyerShare","type":"uint256"},{"internalType":"uint256","name":"votes","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"escrows","outputs":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"serviceId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"string","name":"context","type":"string"},{"internalType":"enum GigaCrew.EscrowStatus","name":"status","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"judgeVotes","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"judges","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastOrderId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastServiceId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lockPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_serviceId","type":"uint256"}],"name":"pauseService","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"pows","outputs":[{"internalType":"string","name":"work","type":"string"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_title","type":"string"},{"internalType":"string","name":"_description","type":"string"},{"internalType":"string","name":"_communicationChannel","type":"string"},{"internalType":"uint256","name":"_rate","type":"uint256"}],"name":"registerService","outputs":[{"internalType":"uint256","name":"service_id","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_serviceId","type":"uint256"}],"name":"resumeService","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"services","outputs":[{"internalType":"bool","name":"paused","type":"bool"},{"internalType":"address","name":"provider","type":"address"},{"internalType":"string","name":"title","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"communicationChannel","type":"string"},{"internalType":"uint256","name":"rate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_orderId","type":"uint256"}],"name":"submitDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_orderId","type":"uint256"},{"internalType":"string","name":"_work","type":"string"}],"name":"submitPoW","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_orderId","type":"uint256"},{"internalType":"uint256","name":"_judgeId","type":"uint256"},{"internalType":"uint256","name":"_buyerShare","type":"uint256"}],"name":"voteOnDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_orderId","type":"uint256"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"withdrawFunds","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/GigaCrew.sol":"GigaCrew"},"evmVersion":"paris","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[":forge-std/=lib/forge-std/src/"]},"sources":{"src/GigaCrew.sol":{"keccak256":"0xf49b1025fc420267b32718dca1b2bfc761c435c376a2e4238f63463df3d78db1","license":"UNLICENSED","urls":["bzz-raw://d4e8767d22e7f4c1bc54be0a09945c2b67652fd2e94b166f3397f36ea86c5fec","dweb:/ipfs/QmRBTGooSoitm86LDwCb4rTaq9UWbezxzToM7A4MdJ41bw"]}},"version":1}', metadata: { compiler: { version: "0.8.19+commit.7dd6d404" }, language: "Solidity", output: { abi: [{ inputs: [{ internalType: "address[]", name: "_judges", type: "address[]" }], stateMutability: "nonpayable", type: "constructor" }, { inputs: [], type: "error", name: "AlreadyVoted" }, { inputs: [{ internalType: "uint256", name: "deadline", type: "uint256" }], type: "error", name: "DeadlineAlreadyPassed" }, { inputs: [{ internalType: "uint256", name: "deadline", type: "uint256" }], type: "error", name: "DeadlineNotPassed" }, { inputs: [{ internalType: "uint256", name: "deadline", type: "uint256" }], type: "error", name: "DisputeResolutionPeriodNotPassed" }, { inputs: [{ internalType: "uint256", name: "deadline", type: "uint256" }], type: "error", name: "DisputeResolutionPeriodPassed" }, { inputs: [], type: "error", name: "EmptyWork" }, { inputs: [], type: "error", name: "EscrowAlreadyWithdrawn" }, { inputs: [{ internalType: "enum GigaCrew.EscrowStatus", name: "status", type: "uint8" }], type: "error", name: "EscrowNotPending" }, { inputs: [], type: "error", name: "EscrowWithoutEnoughFunding" }, { inputs: [], type: "error", name: "InvalidBuyerShare" }, { inputs: [], type: "error", name: "InvalidOrderId" }, { inputs: [], type: "error", name: "InvalidServiceId" }, { inputs: [{ internalType: "uint256", name: "lockDeadline", type: "uint256" }], type: "error", name: "LockPeriodNotPassed" }, { inputs: [], type: "error", name: "MustBeBuyer" }, { inputs: [], type: "error", name: "MustBeJudge" }, { inputs: [], type: "error", name: "MustBeSeller" }, { inputs: [], type: "error", name: "NoDispute" }, { inputs: [{ internalType: "uint256", name: "submissionTimestamp", type: "uint256" }], type: "error", name: "PoWAlreadySubmitted" }, { inputs: [], type: "error", name: "PoWNotSubmitted" }, { inputs: [{ internalType: "uint256", name: "orderId", type: "uint256", indexed: true }, { internalType: "uint256", name: "judgeId", type: "uint256", indexed: true }, { internalType: "uint256", name: "buyerShare", type: "uint256", indexed: false }], type: "event", name: "DisputeVote", anonymous: false }, { inputs: [{ internalType: "uint256", name: "orderId", type: "uint256", indexed: false }, { internalType: "uint256", name: "serviceId", type: "uint256", indexed: true }, { internalType: "address", name: "buyer", type: "address", indexed: true }, { internalType: "address", name: "seller", type: "address", indexed: true }, { internalType: "string", name: "context", type: "string", indexed: false }, { internalType: "uint256", name: "deadline", type: "uint256", indexed: false }], type: "event", name: "EscrowCreated", anonymous: false }, { inputs: [{ internalType: "uint256", name: "orderId", type: "uint256", indexed: true }, { internalType: "uint256", name: "disputeResolutionPeriod", type: "uint256", indexed: false }], type: "event", name: "EscrowDisputed", anonymous: false }, { inputs: [{ internalType: "uint256", name: "orderId", type: "uint256", indexed: true }, { internalType: "address", name: "to", type: "address", indexed: true }, { internalType: "uint256", name: "amount", type: "uint256", indexed: false }], type: "event", name: "FundsWithdrawn", anonymous: false }, { inputs: [{ internalType: "uint256", name: "orderId", type: "uint256", indexed: true }, { internalType: "address", name: "buyer", type: "address", indexed: true }, { internalType: "address", name: "seller", type: "address", indexed: true }, { internalType: "string", name: "work", type: "string", indexed: false }, { internalType: "uint256", name: "lockPeriod", type: "uint256", indexed: false }], type: "event", name: "PoWSubmitted", anonymous: false }, { inputs: [{ internalType: "uint256", name: "serviceId", type: "uint256", indexed: true }], type: "event", name: "ServicePaused", anonymous: false }, { inputs: [{ internalType: "uint256", name: "serviceId", type: "uint256", indexed: true }, { internalType: "address", name: "provider", type: "address", indexed: true }], type: "event", name: "ServiceRegistered", anonymous: false }, { inputs: [{ internalType: "uint256", name: "serviceId", type: "uint256", indexed: true }], type: "event", name: "ServiceResumed", anonymous: false }, { inputs: [{ internalType: "uint256", name: "_serviceId", type: "uint256" }, { internalType: "uint256", name: "_deadlinePeriod", type: "uint256" }, { internalType: "string", name: "_context", type: "string" }], stateMutability: "payable", type: "function", name: "createEscrow", outputs: [{ internalType: "uint256", name: "order_id", type: "uint256" }] }, { inputs: [], stateMutability: "view", type: "function", name: "disputeResolutionPeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }] }, { inputs: [{ internalType: "uint256", name: "_orderId", type: "uint256" }], stateMutability: "view", type: "function", name: "disputeResult", outputs: [{ internalType: "uint256", name: "buyerShare", type: "uint256" }] }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function", name: "disputes", outputs: [{ internalType: "uint256", name: "buyerShare", type: "uint256" }, { internalType: "uint256", name: "votes", type: "uint256" }, { internalType: "uint256", name: "timestamp", type: "uint256" }] }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function", name: "escrows", outputs: [{ internalType: "address", name: "buyer", type: "address" }, { internalType: "address", name: "seller", type: "address" }, { internalType: "uint256", name: "serviceId", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "uint256", name: "deadline", type: "uint256" }, { internalType: "string", name: "context", type: "string" }, { internalType: "enum GigaCrew.EscrowStatus", name: "status", type: "uint8" }] }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function", name: "judgeVotes", outputs: [{ internalType: "bool", name: "", type: "bool" }] }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function", name: "judges", outputs: [{ internalType: "address", name: "", type: "address" }] }, { inputs: [], stateMutability: "view", type: "function", name: "lastOrderId", outputs: [{ internalType: "uint256", name: "", type: "uint256" }] }, { inputs: [], stateMutability: "view", type: "function", name: "lastServiceId", outputs: [{ internalType: "uint256", name: "", type: "uint256" }] }, { inputs: [], stateMutability: "view", type: "function", name: "lockPeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }] }, { inputs: [{ internalType: "uint256", name: "_serviceId", type: "uint256" }], stateMutability: "nonpayable", type: "function", name: "pauseService" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function", name: "pows", outputs: [{ internalType: "string", name: "work", type: "string" }, { internalType: "uint256", name: "timestamp", type: "uint256" }] }, { inputs: [{ internalType: "string", name: "_title", type: "string" }, { internalType: "string", name: "_description", type: "string" }, { internalType: "string", name: "_communicationChannel", type: "string" }, { internalType: "uint256", name: "_rate", type: "uint256" }], stateMutability: "nonpayable", type: "function", name: "registerService", outputs: [{ internalType: "uint256", name: "service_id", type: "uint256" }] }, { inputs: [{ internalType: "uint256", name: "_serviceId", type: "uint256" }], stateMutability: "nonpayable", type: "function", name: "resumeService" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function", name: "services", outputs: [{ internalType: "bool", name: "paused", type: "bool" }, { internalType: "address", name: "provider", type: "address" }, { internalType: "string", name: "title", type: "string" }, { internalType: "string", name: "description", type: "string" }, { internalType: "string", name: "communicationChannel", type: "string" }, { internalType: "uint256", name: "rate", type: "uint256" }] }, { inputs: [{ internalType: "uint256", name: "_orderId", type: "uint256" }], stateMutability: "nonpayable", type: "function", name: "submitDispute" }, { inputs: [{ internalType: "uint256", name: "_orderId", type: "uint256" }, { internalType: "string", name: "_work", type: "string" }], stateMutability: "nonpayable", type: "function", name: "submitPoW" }, { inputs: [{ internalType: "uint256", name: "_orderId", type: "uint256" }, { internalType: "uint256", name: "_judgeId", type: "uint256" }, { internalType: "uint256", name: "_buyerShare", type: "uint256" }], stateMutability: "nonpayable", type: "function", name: "voteOnDispute" }, { inputs: [{ internalType: "uint256", name: "_orderId", type: "uint256" }, { internalType: "bytes", name: "_signature", type: "bytes" }], stateMutability: "nonpayable", type: "function", name: "withdrawFunds" }], devdoc: { kind: "dev", methods: {}, version: 1 }, userdoc: { kind: "user", methods: {}, version: 1 } }, settings: { remappings: ["forge-std/=lib/forge-std/src/"], optimizer: { enabled: true, runs: 200 }, metadata: { bytecodeHash: "ipfs" }, compilationTarget: { "src/GigaCrew.sol": "GigaCrew" }, evmVersion: "paris", libraries: {} }, sources: { "src/GigaCrew.sol": { keccak256: "0xf49b1025fc420267b32718dca1b2bfc761c435c376a2e4238f63463df3d78db1", urls: ["bzz-raw://d4e8767d22e7f4c1bc54be0a09945c2b67652fd2e94b166f3397f36ea86c5fec", "dweb:/ipfs/QmRBTGooSoitm86LDwCb4rTaq9UWbezxzToM7A4MdJ41bw"], license: "UNLICENSED" } }, version: 1 }, id: 20 };

// src/seller.ts
import { elizaLogger } from "@elizaos/core";
import { ethers } from "ethers";
var GigaCrewSellerHandler = class {
  runtime;
  contract;
  provider;
  seller;
  serviceId;
  config;
  db;
  totalTime;
  work;
  constructor(runtime, seller, contract, config, db, work) {
    this.runtime = runtime;
    this.contract = contract.connect(seller);
    this.seller = seller;
    this.provider = contract.runner.provider;
    this.serviceId = config.GIGACREW_SERVICE_ID;
    this.totalTime = config.GIGACREW_TIME_PER_SERVICE + config.GIGACREW_TIME_BUFFER;
    this.config = config;
    this.work = work;
    this.db = db;
  }
  async filters() {
    return [
      {
        event: await this.contract.filters.EscrowCreated(null, this.serviceId, null, this.seller.address, null, null).getTopicFilter(),
        handler: this.EscrowCreatedHandler.bind(this)
      }
    ];
  }
  isExpired(deadline) {
    const start = /* @__PURE__ */ new Date();
    const end = new Date(parseInt(deadline) * 1e3 - this.totalTime * 1e3);
    return start > end;
  }
  EscrowCreatedHandler(event) {
    const [orderId, serviceId, buyer, seller, context, deadline] = event.args;
    this.saveNewOrder(orderId, serviceId, buyer, seller, context, deadline);
  }
  saveNewOrder(orderId, serviceId, buyer, seller, context, deadline) {
    if (this.isExpired(deadline)) {
      elizaLogger.info("Can't handle this order! Skipping", {
        orderId,
        serviceId,
        buyer,
        seller,
        context,
        deadline
      });
      return;
    }
    elizaLogger.info("Order Received! Saving to DB", {
      orderId,
      serviceId,
      buyer,
      seller,
      context,
      deadline
    });
    this.db.insertOrder(orderId.toString(), serviceId.toString(), buyer, seller, "0", context, deadline.toString());
  }
  async start() {
    this.handleOrders();
    this.handleWithdrawals();
  }
  async handleOrders() {
    var _a;
    const orders = await this.db.getActiveOrdersForSeller(this.seller.address);
    for (const order of orders) {
      const { order_id: orderId, service_id: serviceId, buyer_address: buyer, seller_address: seller, context, deadline } = order;
      const deadlineTimestamp = (/* @__PURE__ */ new Date(deadline + "Z")).getTime() / 1e3;
      if (this.isExpired(deadlineTimestamp)) {
        elizaLogger.info("Order is expired, skipping", { orderId, serviceId, buyer, seller, context, deadline });
        continue;
      }
      let response = (_a = await this.db.getOrder(orderId)) == null ? void 0 : _a.work;
      if (!response) {
        try {
          response = await this.work(this.runtime, orderId, buyer, context);
          await this.db.setWork(orderId, response);
        } catch (error) {
          await this.db.incrementFailedAttempts(orderId);
          elizaLogger.error("Error doing work", {
            orderId,
            error
          });
          continue;
        }
      }
      try {
        const tx = await (await this.contract.submitPoW(orderId, response)).wait();
        elizaLogger.info("Work Submitted!", {
          orderId,
          response,
          tx
        });
        const lockPeriod = tx.logs[0].args[4].toString();
        await this.db.setLockPeriod(orderId, lockPeriod);
      } catch (error) {
        elizaLogger.error("Error submitting work", {
          orderId,
          error
        });
      }
    }
    setTimeout(() => {
      this.handleOrders();
    }, 2e3);
  }
  async handleWithdrawals() {
    var _a, _b;
    const withdrawals = await this.db.getWithdrawableOrdersForSeller(this.seller.address);
    const cantWithdrawIds = [];
    for (const withdrawal of withdrawals) {
      const { order_id: orderId } = withdrawal;
      try {
        try {
          const buyerShare = await this.contract.disputeResult(orderId);
          if (buyerShare == 100) {
            cantWithdrawIds.push(orderId);
            continue;
          }
        } catch (error) {
          if (((_a = error.revert) == null ? void 0 : _a.name) == "DisputeResolutionPeriodNotPassed") {
            await this.db.setResolutionPeriod(orderId, error.revert.args[0].toString());
            continue;
          }
        }
        const tx = await (await this.contract.withdrawFunds(orderId, "0x")).wait();
        elizaLogger.info("Withdrawal successful!", {
          orderId,
          tx
        });
        cantWithdrawIds.push(orderId);
      } catch (error) {
        elizaLogger.error("Error withdrawing funds", {
          orderId,
          error
        });
        if (error.action == "estimateGas" && ((_b = error.data) == null ? void 0 : _b.startsWith("0x32c6b2c3"))) {
          const resolutionPeriod = ethers.toBigInt("0x" + error.data.slice(10)).toString();
          await this.db.setResolutionPeriod(orderId, resolutionPeriod);
        }
      }
    }
    await this.db.setCanSellerWithdraw(cantWithdrawIds, false);
    setTimeout(() => {
      this.handleWithdrawals();
    }, 2e3);
  }
};

// src/buyer.ts
import { elizaLogger as elizaLogger2 } from "@elizaos/core";
import { ethers as ethers2 } from "ethers";
var GigaCrewBuyerHandler = class {
  runtime;
  contract;
  provider;
  buyer;
  serviceId;
  config;
  db;
  orders;
  processWork;
  constructor(runtime, buyer, contract, config, db, processWork) {
    this.runtime = runtime;
    this.contract = contract.connect(buyer);
    this.buyer = buyer;
    this.provider = contract.runner.provider;
    this.serviceId = config.GIGACREW_SERVICE_ID;
    this.config = config;
    this.db = db;
    this.orders = {};
    this.processWork = processWork;
  }
  async filters() {
    return [
      {
        event: await this.contract.filters.PoWSubmitted(null, this.buyer.address, null, null, null).getTopicFilter(),
        handler: this.PoWHandler.bind(this)
      }
    ];
  }
  start() {
    this.handleWithdrawals();
  }
  async PoWHandler(event) {
    const [orderId, buyer, seller, work, lockPeriod] = event.args;
    elizaLogger2.info("Work Received!", {
      orderId,
      work
    });
    const order = await this.db.setWorkAndReturn(orderId, work, lockPeriod);
    await this.handleWork(order);
  }
  async createEscrow(service, deadlinePeriod, context, callbackData) {
    let deadlineSeconds = Math.max(deadlinePeriod, 100);
    const tx = await (await this.contract.createEscrow(service.serviceId, deadlineSeconds, context, { value: service.price })).wait();
    const orderId = tx.logs[0].args[0].toString();
    const deadline = tx.logs[0].args[5].toString();
    await this.db.insertOrder(
      orderId,
      service.serviceId,
      this.buyer.address,
      service.seller,
      "0",
      context,
      deadline.toString(),
      callbackData
    );
    return orderId;
  }
  async dispute(orderId) {
    try {
      const tx = await (await this.contract.submitDispute(orderId)).wait();
      const resolutionPeriod = tx.logs[0].args[1].toString();
      await this.db.setResolutionPeriod(orderId, resolutionPeriod);
      elizaLogger2.info("Dispute created!", {
        orderId,
        tx
      });
    } catch (error) {
      elizaLogger2.error("Error submitting dispute", {
        orderId,
        error
      });
    }
  }
  async waitForWork(orderId, timeout) {
    const order = await this.db.getOrder(orderId);
    if (order && order.work !== null) {
      return order.work;
    }
    return new Promise((resolve, reject) => {
      this.orders[orderId] = resolve;
      if (timeout) {
        setTimeout(() => {
          delete this.orders[orderId];
          reject(new Error("Timeout waiting for work"));
        }, timeout);
      }
    });
  }
  async searchServices(query) {
    const endpoint = this.config.GIGACREW_INDEXER_URL + "/api/services/search";
    const response = await fetch(`${endpoint}?query=${encodeURIComponent(query)}&limit=10`);
    const data = await response.json();
    return data;
  }
  async handleWork(workRequest) {
    const resolve = this.orders[workRequest == null ? void 0 : workRequest.order_id];
    if (resolve) {
      delete this.orders[workRequest.order_id];
      resolve(workRequest.work);
    }
    if (this.processWork) {
      this.processWork(workRequest);
    }
  }
  async handleWithdrawals() {
    var _a, _b;
    const withdrawals = await this.db.getWithdrawableOrdersForBuyer(this.buyer.address);
    const cantWithdrawIds = [];
    for (const withdrawal of withdrawals) {
      const { order_id: orderId } = withdrawal;
      try {
        try {
          const buyerShare = await this.contract.disputeResult(orderId);
          if (buyerShare == 0) {
            cantWithdrawIds.push(orderId);
            continue;
          }
        } catch (error) {
          if (((_a = error.revert) == null ? void 0 : _a.name) == "DisputeResolutionPeriodNotPassed") {
            await this.db.setResolutionPeriod(orderId, error.revert.args[0].toString());
            continue;
          }
        }
        const tx = await (await this.contract.withdrawFunds(orderId, "0x")).wait();
        elizaLogger2.info("Withdrawal successful!", {
          orderId,
          tx
        });
        cantWithdrawIds.push(orderId);
      } catch (error) {
        elizaLogger2.error("Error withdrawing funds", {
          orderId,
          error
        });
        if (error.action == "estimateGas" && ((_b = error.data) == null ? void 0 : _b.startsWith("0x32c6b2c3"))) {
          const resolutionPeriod = ethers2.toBigInt("0x" + error.data.slice(10)).toString();
          await this.db.setResolutionPeriod(orderId, resolutionPeriod);
        }
      }
    }
    await this.db.setCanBuyerWithdraw(cantWithdrawIds, false);
    setTimeout(() => {
      this.handleWithdrawals();
    }, 2e3);
  }
};

// src/db.ts
var GigaCrewDatabase = class {
  db;
  constructor(db) {
    this.db = db;
    this.db.exec(`
            CREATE TABLE IF NOT EXISTS gigacrew_orders (
                order_id TEXT PRIMARY KEY,
                service_id TEXT,
                buyer_address TEXT,
                seller_address TEXT,
                status INTEGER,
                context TEXT,
                work TEXT,
                deadline DATETIME,
                lock_period DATETIME,
                resolution_period DATETIME,
                callback_data TEXT,
                failed_attempts INTEGER DEFAULT 0,
                can_seller_withdraw BOOL DEFAULT TRUE,
                can_buyer_withdraw BOOL DEFAULT TRUE
            );
        `);
  }
  async insertOrder(orderId, serviceId, buyer, seller, status, context, deadline, callbackData) {
    await this.db.prepare(`
            INSERT INTO gigacrew_orders (order_id, service_id, buyer_address, seller_address, status, context, deadline, callback_data) 
            VALUES (?, ?, ?, ?, ?, ?, datetime(?, 'unixepoch'), ?)
            ON CONFLICT(order_id) DO UPDATE SET
                service_id=excluded.service_id,
                buyer_address=excluded.buyer_address,
                seller_address=excluded.seller_address,
                context=excluded.context,
                deadline=excluded.deadline;
        `).run(orderId, serviceId, buyer, seller, status, context, deadline, callbackData);
  }
  async setStatus(orderId, status) {
    return await this.db.prepare(`
            UPDATE gigacrew_orders SET status = ? WHERE order_id = ?;
        `).run(status, orderId);
  }
  async setWork(orderId, work) {
    return await this.db.prepare(`
            UPDATE gigacrew_orders SET work = ? WHERE order_id = ?;
        `).run(work, orderId);
  }
  async setWorkAndReturn(orderId, work, lockPeriod) {
    return await this.db.prepare(`
            UPDATE gigacrew_orders SET work = ?, lock_period = datetime(?, 'unixepoch') WHERE order_id = ? RETURNING *;
        `).get(work, lockPeriod, orderId);
  }
  async setLockPeriod(orderId, lockPeriod) {
    return await this.db.prepare(`
            UPDATE gigacrew_orders SET lock_period = datetime(?, 'unixepoch') WHERE order_id = ?;
        `).run(lockPeriod, orderId);
  }
  async setResolutionPeriod(orderId, resolutionPeriod) {
    return await this.db.prepare(`
            UPDATE gigacrew_orders SET resolution_period = datetime(?, 'unixepoch') WHERE order_id = ?;
        `).run(resolutionPeriod, orderId);
  }
  async getOrder(orderId) {
    return await this.db.prepare(`
            SELECT * FROM gigacrew_orders WHERE order_id = ?;
        `).get(orderId);
  }
  async deleteOrdersById(orderIds) {
    const placeholders = orderIds.map((id) => `?`).join(",");
    return await this.db.prepare(`
            DELETE FROM gigacrew_orders WHERE order_id IN (${placeholders});
        `).run(...orderIds);
  }
  async getActiveOrdersForSeller(seller) {
    return await this.db.prepare(`
            SELECT * FROM gigacrew_orders WHERE
                status = ${0 /* Pending */} AND
                failed_attempts < 3 AND
                seller_address = ? AND
                deadline > datetime('now') AND lock_period IS NULL
                    ORDER BY deadline ASC;
        `).all(seller);
  }
  async getWithdrawableOrdersForSeller(seller) {
    return await this.db.prepare(`
            SELECT * FROM gigacrew_orders WHERE
                seller_address = ? AND
                can_seller_withdraw = TRUE AND
                (status = ${0 /* Pending */} OR status = ${2 /* BuyerWithdrawn */}) AND
                (lock_period < datetime('now') OR resolution_period < datetime('now'));
        `).all(seller);
  }
  async getWithdrawableOrdersForBuyer(buyer) {
    return await this.db.prepare(`
            SELECT * FROM gigacrew_orders WHERE
                buyer_address = ? AND
                can_buyer_withdraw = TRUE AND
                (status = ${0 /* Pending */} OR status = ${3 /* SellerWithdrawn */}) AND
                (
                    (deadline < datetime('now') AND lock_period is NULL) OR
                    resolution_period < datetime('now')
                );
        `).all(buyer);
  }
  async incrementFailedAttempts(orderId) {
    return await this.db.prepare(`
            UPDATE gigacrew_orders SET failed_attempts = failed_attempts + 1 WHERE order_id = ?;
        `).run(orderId);
  }
  async setCanSellerWithdraw(orderIds, canSellerWithdraw) {
    const placeholders = orderIds.map((id) => `?`).join(",");
    return await this.db.prepare(`
            UPDATE gigacrew_orders SET can_seller_withdraw = ? WHERE order_id IN (${placeholders});
        `).run(canSellerWithdraw ? 1 : 0, ...orderIds);
  }
  async setCanBuyerWithdraw(orderIds, canBuyerWithdraw) {
    const placeholders = orderIds.map((id) => `?`).join(",");
    return await this.db.prepare(`
            UPDATE gigacrew_orders SET can_buyer_withdraw = ? WHERE order_id IN (${placeholders});
        `).run(canBuyerWithdraw ? 1 : 0, ...orderIds);
  }
};

// src/worker.ts
import { getEmbeddingZeroVector, ModelClass } from "@elizaos/core";
import { messageCompletionFooter, stringToUuid, composeContext, generateMessageResponse } from "@elizaos/core";
var messageHandlerTemplate = `
{{actionExamples}}
(Action examples are for reference only. Do not use the information from them in your response.)

# Knowledge
{{knowledge}}

# Task: Respond with what is expected of {{agentName}}.
About {{agentName}}:
{{bio}}
{{lore}}

{{providers}}

{{attachments}}

# Capabilities
Note that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the "Attachments" section.

{{messageDirections}}

{{recentMessages}}

{{actions}}

# Instructions: Write the next message for {{agentName}}.
` + messageCompletionFooter;
async function workResponseGenerator(runtime, orderId, buyerAddress, text) {
  const roomId = stringToUuid(orderId);
  const userId = stringToUuid(buyerAddress);
  await runtime.ensureConnection(
    userId,
    roomId
  );
  const messageId = stringToUuid(Date.now().toString());
  const content = {
    text
  };
  const userMessage = {
    content,
    userId,
    roomId,
    agentId: runtime.agentId
  };
  const memory = {
    id: stringToUuid(messageId + "-" + userId),
    ...userMessage,
    agentId: runtime.agentId,
    userId,
    roomId,
    content,
    createdAt: Date.now()
  };
  await runtime.messageManager.addEmbeddingToMemory(memory);
  await runtime.messageManager.createMemory(memory);
  let state = await runtime.composeState(userMessage, {
    agentName: runtime.character.name
  });
  const context = composeContext({
    state,
    template: messageHandlerTemplate
  });
  const response = await generateMessageResponse({
    runtime,
    context,
    modelClass: ModelClass.LARGE
  });
  if (!response) {
    throw new Error("No response from generateMessageResponse");
  }
  const responseMessage = {
    id: stringToUuid(messageId + "-" + runtime.agentId),
    ...userMessage,
    userId: runtime.agentId,
    content: response,
    embedding: getEmbeddingZeroVector(),
    createdAt: Date.now()
  };
  await runtime.messageManager.createMemory(responseMessage);
  state = await runtime.updateRecentMessageState(state);
  let message = null;
  await runtime.processActions(
    memory,
    [responseMessage],
    state,
    async (newMessages) => {
      message = newMessages;
      return [memory];
    }
  );
  await runtime.evaluate(memory, state);
  const action = runtime.actions.find(
    (a) => a.name === response.action
  );
  const shouldSuppressInitialMessage = action == null ? void 0 : action.suppressInitialMessage;
  if (!shouldSuppressInitialMessage) {
    return message ? response.text + "\n" + message.text : response.text;
  } else {
    return message ? message.text : "";
  }
}

// src/actions/index.ts
import { generateMessageResponse as generateMessageResponse2, ModelClass as ModelClass2 } from "@elizaos/core";
import { composeContext as composeContext2, elizaLogger as elizaLogger3, generateText } from "@elizaos/core";
var searchServiceTemplate = `
# Context: As {{agentName}} you decided to go ahead and hire a service based on the recent conversation that you had.
# Task: The first step is to search for services that align with the needs. Give me the query that you would use to search for the service that you need so I can provide you with a list of services that you can choose from.
About {{agentName}}:
{{bio}}
{{lore}}
{{knowledge}}

{{providers}}

{{messageDirections}}

{{recentMessages}}

# Instructions: The query should be less than 100 words and explain the type of service that you need. Your response MUST ONLY contain the query.
`;
var selectServiceTemplate = `
# Context: As {{agentName}} you decided to go ahead and hire a service based on the recent conversation that you had. And then you searched for services that aligned with the needs.
You used this query to search for services: {{serviceQuery}}

# ServiceList:
{{serviceList}}

# Task: Now you need to either 1. Select a service from the list 2. Decide that you want to search again with a different query 3. Decide that maybe you should give up on hiring a service and apologize to the user.
About {{agentName}}:
{{bio}}
{{lore}}
{{knowledge}}

{{providers}}

{{messageDirections}}

{{recentMessages}}

# Instructions
Your response must be formatted in a JSON block.
The possible fields are "chosen_service_id", "new_query" and "apology".
There's also a must include field called "reason" which should explain why you chose the field you chose.
`;
var workContextTemplate = `
# Context: As {{agentName}} you decided to go ahead and hire a service based on the recent conversation that you had. And then you searched for services that aligned with the needs and decided to hire the following service.
# Service
{{serviceTitle}}
{{serviceDescription}}

# Task: Think of the job that you decided to hire this service for based on your recent conversation. Now you need to provide the service provider of this service with information and details about the job so that he can do the work and complete it for you.
About {{agentName}}:
{{bio}}
{{lore}}
{{knowledge}}

{{providers}}

{{messageDirections}}

{{recentMessages}}

# Instructions: Be concise and to the point. Only provide information and context about the job. No need for any other information or formalities.
`;
var GigaCrewHireAction = {
  name: "HIRE_AGENT",
  similes: ["HIRE_SERVICE", "SEARCH_SERVICES"],
  description: "Use this action when you have all the data and information you need to do a task or a service HOWEVER you are not able to do it yourself. Keep in mind that this action will hire another agent to process the task or service based on the context you provide so DO NOT use this action if you don't have all the information needed for the task. Instead just ask the user for the information first.If you're going to ask the user if they're ok with you hiring someone to do it, DO NOT use this action.This action is only for when 1. You have all the information 2. You are sure you are going to do it and aren't going to ask for permission.",
  examples: [
    [
      {
        user: "{{user1}}",
        content: {
          text: "Hey I need help with a calculation!"
        }
      },
      {
        user: "{{user2}}",
        content: {
          text: "I'm not confident in maths... I could hire someone to do it for me if you want?"
        }
      },
      {
        user: "{{user1}}",
        content: {
          text: "Oh ok sure! Please hire someone to do it for me and let me know what they say."
        }
      },
      {
        user: "{{user2}}",
        content: {
          text: "Ok well first I need to know what the formula is and the numbers you want to use."
        }
      },
      {
        user: "{{user1}}",
        content: {
          text: "The formula is 5x^2 + 10x + 15 when x = 2"
        }
      },
      {
        user: "{{user2}}",
        content: { text: "Alright I hired someone to calculate 5x^2 + 10x + 15 when x = 2 for you!", action: "HIRE_AGENT" }
      }
    ]
  ],
  validate: async (runtime, message, state) => {
    return true;
  },
  handler: async (runtime, message, state, options, callback) => {
    elizaLogger3.info("GigaCrew HIRE_AGENT action called", {
      message: message.content.text
    });
    const client = runtime.clients["gigacrew"];
    const query = await generateServiceQuery(runtime, state);
    const { services, serviceSelectionResponse } = await searchServices(runtime, query, state);
    const service = await handleServiceSelection(serviceSelectionResponse, services);
    if (typeof service === "string") {
      return callback({
        text: service
      });
    }
    const workContext = await generateWorkContext(runtime, service, state);
    const work = await createAndWaitForWork(client, service, workContext);
    callback({
      text: work
    });
  }
};
async function generateServiceQuery(runtime, state) {
  const searchContext = composeContext2({
    state,
    template: searchServiceTemplate
  });
  const query = await generateText({ runtime, context: searchContext, modelClass: ModelClass2.SMALL });
  elizaLogger3.info("GigaCrew: Generated service query", {
    serviceQuery: query
  });
  return query;
}
async function searchServices(runtime, query, state) {
  let services = null;
  let serviceSelectionResponse = null;
  let retries = 0;
  const client = runtime.clients["gigacrew"];
  do {
    services = await client.buyerHandler.searchServices(query);
    elizaLogger3.info("GigaCrew HIRE_AGENT action searched for services", {
      services
    });
    state["serviceQuery"] = query;
    state["serviceList"] = !Array.isArray(services) || services.length == 0 ? "NO SERVICES FOUND" : services.map((service) => `ID: ${service.serviceId} - Title: ${service.title.replace(/\\n/g, " ")} - Description: ${service.description.replace(/\\n/g, " ")}`).join("\n");
    const serviceContext = composeContext2({
      state,
      template: selectServiceTemplate
    });
    serviceSelectionResponse = await generateMessageResponse2({
      runtime,
      context: serviceContext,
      modelClass: ModelClass2.SMALL
    });
    elizaLogger3.info("GigaCrew: Service selection response", serviceSelectionResponse);
    if (serviceSelectionResponse.new_query && serviceSelectionResponse.new_query.length > 0) {
      query = serviceSelectionResponse.new_query;
    } else {
      query = null;
    }
    retries++;
  } while (query && retries < 3);
  return { services, serviceSelectionResponse };
}
async function handleServiceSelection(serviceSelectionResponse, services) {
  let service = null;
  if (serviceSelectionResponse.chosen_service_id != null && serviceSelectionResponse.chosen_service_id != void 0) {
    const service_id = serviceSelectionResponse.chosen_service_id.toString();
    service = services.find((service2) => service2.serviceId === service_id);
  } else if (serviceSelectionResponse.apology && serviceSelectionResponse.apology.length > 0) {
    elizaLogger3.info("GigaCrew HIRE_AGENT action no service selected... using apology");
    return serviceSelectionResponse.apology;
  }
  if (!service) {
    elizaLogger3.info("GigaCrew HIRE_AGENT action bad serviceId... using fallback apology");
    return "I couldn't find a service that does what's needed. I'm sorry.";
  }
  return service;
}
async function generateWorkContext(runtime, service, state) {
  state["serviceTitle"] = service.title;
  state["serviceDescription"] = service.description;
  const context = composeContext2({
    state,
    template: workContextTemplate
  });
  const workContext = await generateText({
    runtime,
    context,
    modelClass: ModelClass2.SMALL
  });
  elizaLogger3.info("GigaCrew: Generated work context", {
    workContext
  });
  return workContext;
}
async function createAndWaitForWork(client, service, workContext) {
  const orderId = await client.buyerHandler.createEscrow(service, 100, workContext);
  elizaLogger3.info("GigaCrew: Waiting for work to be done", {
    orderId
  });
  return await client.buyerHandler.waitForWork(orderId);
}

// src/client.ts
var GigaCrewABI = GigaCrew_default.abi;
var GigaCrewClient = class {
  runtime;
  config;
  provider;
  contract;
  seller;
  buyer;
  db;
  filters;
  sellerHandler;
  buyerHandler;
  constructor(runtime, config, worker, processWork) {
    this.runtime = runtime;
    this.config = config;
    if (!this.config.GIGACREW_PROVIDER_URL || !this.config.GIGACREW_CONTRACT_ADDRESS) {
      throw new Error("GigaCrew client requires GIGACREW_PROVIDER_URL and GIGACREW_CONTRACT_ADDRESS");
    }
    const provider_url = this.config.GIGACREW_PROVIDER_URL;
    if (provider_url.startsWith("ws://") || provider_url.startsWith("wss://")) {
      this.provider = new ethers3.WebSocketProvider(provider_url);
    } else if (provider_url.startsWith("http://") || provider_url.startsWith("https://")) {
      this.provider = new ethers3.JsonRpcProvider(provider_url);
    } else {
      throw new Error("Invalid provider URL. Must start with ws://, wss://, http://, or https://");
    }
    this.contract = new ethers3.Contract(this.config.GIGACREW_CONTRACT_ADDRESS, GigaCrewABI, this.provider);
    this.seller = this.config.GIGACREW_SELLER_PRIVATE_KEY ? new ethers3.Wallet(this.config.GIGACREW_SELLER_PRIVATE_KEY, this.provider) : null;
    this.buyer = this.config.GIGACREW_BUYER_PRIVATE_KEY ? new ethers3.Wallet(this.config.GIGACREW_BUYER_PRIVATE_KEY, this.provider) : null;
    if (!this.seller && !this.buyer) {
      throw new Error("GigaCrew client requires at least one of GIGACREW_SELLER_PRIVATE_KEY or GIGACREW_BUYER_PRIVATE_KEY");
    }
    this.db = new GigaCrewDatabase(this.runtime.databaseAdapter.db);
    if (this.seller) {
      if (!this.config.GIGACREW_SERVICE_ID) {
        throw new Error("GigaCrew client requires GIGACREW_SERVICE_ID when acting as a seller");
      }
      this.sellerHandler = new GigaCrewSellerHandler(this.runtime, this.seller, this.contract, this.config, this.db, worker);
    }
    if (this.buyer) {
      if (!this.config.GIGACREW_INDEXER_URL) {
        throw new Error("GigaCrew client requires GIGACREW_INDEXER_URL when acting as a buyer");
      }
      this.buyerHandler = new GigaCrewBuyerHandler(this.runtime, this.buyer, this.contract, this.config, this.db, processWork);
    } else {
      const index = this.runtime.actions.findIndex((action) => action.name === "HIRE_AGENT");
      if (index === -1) {
        throw new Error("Couldn't find HIRE_AGENT action for removal");
      }
      this.runtime.actions.splice(index, 1);
      elizaLogger4.info("Gigacrew Client: Removed HIRE_AGENT action for non buyer agent");
    }
    this.filters = [];
  }
  async start() {
    if (this.seller) {
      this.filters.push(...await this.sellerHandler.filters());
      this.sellerHandler.start();
    }
    if (this.buyer) {
      this.filters.push(...await this.buyerHandler.filters());
      this.buyerHandler.start();
    }
    let fromBlock = 0;
    if (this.config.GIGACREW_FORCE_FROM_BLOCK) {
      fromBlock = this.config.GIGACREW_FROM_BLOCK;
    } else {
      fromBlock = Math.max(this.config.GIGACREW_FROM_BLOCK, await this.runtime.cacheManager.get("gigacrew_last_block") || 0);
    }
    elizaLogger4.info("Gigacrew Event Listener: Start", { lastBlock: fromBlock });
    this.listen(fromBlock);
  }
  async listen(fromBlock) {
    let toBlock = await this.provider.getBlockNumber();
    if (toBlock < fromBlock) {
      setTimeout(() => {
        this.listen(fromBlock);
      }, 5e3);
      return;
    }
    for (const filter of this.filters) {
      const events = await this.contract.queryFilter(filter.event, fromBlock, toBlock);
      events.forEach(filter.handler);
    }
    await this.runtime.cacheManager.set("gigacrew_last_block", toBlock);
    setTimeout(() => {
      this.listen(toBlock + 1);
    }, 5e3);
  }
};
var GigaCrew = class {
  worker = workResponseGenerator;
  processWork;
  async start(runtime) {
    const config = getGigaCrewConfig(runtime);
    const client = new GigaCrewClient(runtime, config, this.worker, this.processWork);
    await client.start();
    return client;
  }
  async stop(_runtime) {
    console.warn("GigaCrew client does not support stopping yet");
  }
};

// src/index.ts
var gigaCrewPlugin = {
  name: "GigaCrew",
  description: "GigaCrew plugin",
  clients: [new GigaCrew()],
  actions: [GigaCrewHireAction]
};
var index_default = gigaCrewPlugin;
export {
  index_default as default
};
//# sourceMappingURL=index.js.map